//
// File generated by rootcint at Fri Oct 03 15:53:33 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME RDKDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RDKDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void RDKConfig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RDKConfig_Dictionary();
   static void delete_RDKConfig(void *p);
   static void deleteArray_RDKConfig(void *p);
   static void destruct_RDKConfig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RDKConfig*)
   {
      ::RDKConfig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RDKConfig),0);
      static ::ROOT::TGenericClassInfo 
         instance("RDKConfig", "./RDKConfig.h", 14,
                  typeid(::RDKConfig), DefineBehavior(ptr, ptr),
                  0, &RDKConfig_Dictionary, isa_proxy, 0,
                  sizeof(::RDKConfig) );
      instance.SetDelete(&delete_RDKConfig);
      instance.SetDeleteArray(&deleteArray_RDKConfig);
      instance.SetDestructor(&destruct_RDKConfig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RDKConfig*)
   {
      return GenerateInitInstanceLocal((::RDKConfig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RDKConfig*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RDKConfig_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RDKConfig*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RDKException_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RDKException_Dictionary();
   static void delete_RDKException(void *p);
   static void deleteArray_RDKException(void *p);
   static void destruct_RDKException(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RDKException*)
   {
      ::RDKException *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RDKException),0);
      static ::ROOT::TGenericClassInfo 
         instance("RDKException", "./RDKTypes.h", 22,
                  typeid(::RDKException), DefineBehavior(ptr, ptr),
                  0, &RDKException_Dictionary, isa_proxy, 0,
                  sizeof(::RDKException) );
      instance.SetDelete(&delete_RDKException);
      instance.SetDeleteArray(&deleteArray_RDKException);
      instance.SetDestructor(&destruct_RDKException);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RDKException*)
   {
      return GenerateInitInstanceLocal((::RDKException*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RDKException*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RDKException_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RDKException*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RawData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RawData_Dictionary();
   static void *new_RawData(void *p = 0);
   static void *newArray_RawData(Long_t size, void *p);
   static void delete_RawData(void *p);
   static void deleteArray_RawData(void *p);
   static void destruct_RawData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RawData*)
   {
      ::RawData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RawData),0);
      static ::ROOT::TGenericClassInfo 
         instance("RawData", "./RDKTypes.h", 30,
                  typeid(::RawData), DefineBehavior(ptr, ptr),
                  0, &RawData_Dictionary, isa_proxy, 0,
                  sizeof(::RawData) );
      instance.SetNew(&new_RawData);
      instance.SetNewArray(&newArray_RawData);
      instance.SetDelete(&delete_RawData);
      instance.SetDeleteArray(&deleteArray_RawData);
      instance.SetDestructor(&destruct_RawData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RawData*)
   {
      return GenerateInitInstanceLocal((::RawData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RawData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RawData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RawData*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Recon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Recon_Dictionary();
   static void *new_Recon(void *p = 0);
   static void *newArray_Recon(Long_t size, void *p);
   static void delete_Recon(void *p);
   static void deleteArray_Recon(void *p);
   static void destruct_Recon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Recon*)
   {
      ::Recon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Recon),0);
      static ::ROOT::TGenericClassInfo 
         instance("Recon", "./RDKTypes.h", 35,
                  typeid(::Recon), DefineBehavior(ptr, ptr),
                  0, &Recon_Dictionary, isa_proxy, 0,
                  sizeof(::Recon) );
      instance.SetNew(&new_Recon);
      instance.SetNewArray(&newArray_Recon);
      instance.SetDelete(&delete_Recon);
      instance.SetDeleteArray(&deleteArray_Recon);
      instance.SetDestructor(&destruct_Recon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Recon*)
   {
      return GenerateInitInstanceLocal((::Recon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Recon*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Recon_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Recon*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Entry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Entry_Dictionary();
   static void *new_Entry(void *p = 0);
   static void *newArray_Entry(Long_t size, void *p);
   static void delete_Entry(void *p);
   static void deleteArray_Entry(void *p);
   static void destruct_Entry(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Entry*)
   {
      ::Entry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Entry),0);
      static ::ROOT::TGenericClassInfo 
         instance("Entry", "./RDKTypes.h", 51,
                  typeid(::Entry), DefineBehavior(ptr, ptr),
                  0, &Entry_Dictionary, isa_proxy, 0,
                  sizeof(::Entry) );
      instance.SetNew(&new_Entry);
      instance.SetNewArray(&newArray_Entry);
      instance.SetDelete(&delete_Entry);
      instance.SetDeleteArray(&deleteArray_Entry);
      instance.SetDestructor(&destruct_Entry);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Entry*)
   {
      return GenerateInitInstanceLocal((::Entry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Entry*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Entry_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Entry*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void BoardEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void BoardEvent_Dictionary();
   static void *new_BoardEvent(void *p = 0);
   static void *newArray_BoardEvent(Long_t size, void *p);
   static void delete_BoardEvent(void *p);
   static void deleteArray_BoardEvent(void *p);
   static void destruct_BoardEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::BoardEvent*)
   {
      ::BoardEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::BoardEvent),0);
      static ::ROOT::TGenericClassInfo 
         instance("BoardEvent", "./RDKTypes.h", 58,
                  typeid(::BoardEvent), DefineBehavior(ptr, ptr),
                  0, &BoardEvent_Dictionary, isa_proxy, 0,
                  sizeof(::BoardEvent) );
      instance.SetNew(&new_BoardEvent);
      instance.SetNewArray(&newArray_BoardEvent);
      instance.SetDelete(&delete_BoardEvent);
      instance.SetDeleteArray(&deleteArray_BoardEvent);
      instance.SetDestructor(&destruct_BoardEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::BoardEvent*)
   {
      return GenerateInitInstanceLocal((::BoardEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BoardEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void BoardEvent_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::BoardEvent*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void epEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void epEvent_Dictionary();
   static void *new_epEvent(void *p = 0);
   static void *newArray_epEvent(Long_t size, void *p);
   static void delete_epEvent(void *p);
   static void deleteArray_epEvent(void *p);
   static void destruct_epEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::epEvent*)
   {
      ::epEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::epEvent),0);
      static ::ROOT::TGenericClassInfo 
         instance("epEvent", "./RDKTypes.h", 73,
                  typeid(::epEvent), DefineBehavior(ptr, ptr),
                  0, &epEvent_Dictionary, isa_proxy, 0,
                  sizeof(::epEvent) );
      instance.SetNew(&new_epEvent);
      instance.SetNewArray(&newArray_epEvent);
      instance.SetDelete(&delete_epEvent);
      instance.SetDeleteArray(&deleteArray_epEvent);
      instance.SetDestructor(&destruct_epEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::epEvent*)
   {
      return GenerateInitInstanceLocal((::epEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::epEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void epEvent_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::epEvent*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void NData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void NData_Dictionary();
   static void *new_NData(void *p = 0);
   static void *newArray_NData(Long_t size, void *p);
   static void delete_NData(void *p);
   static void deleteArray_NData(void *p);
   static void destruct_NData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::NData*)
   {
      ::NData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::NData),0);
      static ::ROOT::TGenericClassInfo 
         instance("NData", "./RDKTypes.h", 96,
                  typeid(::NData), DefineBehavior(ptr, ptr),
                  0, &NData_Dictionary, isa_proxy, 0,
                  sizeof(::NData) );
      instance.SetNew(&new_NData);
      instance.SetNewArray(&newArray_NData);
      instance.SetDelete(&delete_NData);
      instance.SetDeleteArray(&deleteArray_NData);
      instance.SetDestructor(&destruct_NData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::NData*)
   {
      return GenerateInitInstanceLocal((::NData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::NData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void NData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::NData*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Task_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Task_Dictionary();
   static void *new_Task(void *p = 0);
   static void *newArray_Task(Long_t size, void *p);
   static void delete_Task(void *p);
   static void deleteArray_Task(void *p);
   static void destruct_Task(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Task*)
   {
      ::Task *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Task),0);
      static ::ROOT::TGenericClassInfo 
         instance("Task", "./RDKTypes.h", 108,
                  typeid(::Task), DefineBehavior(ptr, ptr),
                  0, &Task_Dictionary, isa_proxy, 0,
                  sizeof(::Task) );
      instance.SetNew(&new_Task);
      instance.SetNewArray(&newArray_Task);
      instance.SetDelete(&delete_Task);
      instance.SetDeleteArray(&deleteArray_Task);
      instance.SetDestructor(&destruct_Task);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Task*)
   {
      return GenerateInitInstanceLocal((::Task*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Task*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Task_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Task*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Smoother_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Smoother_Dictionary();
   static void *new_Smoother(void *p = 0);
   static void *newArray_Smoother(Long_t size, void *p);
   static void delete_Smoother(void *p);
   static void deleteArray_Smoother(void *p);
   static void destruct_Smoother(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Smoother*)
   {
      ::Smoother *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Smoother),0);
      static ::ROOT::TGenericClassInfo 
         instance("Smoother", "./Smoother.h", 9,
                  typeid(::Smoother), DefineBehavior(ptr, ptr),
                  0, &Smoother_Dictionary, isa_proxy, 0,
                  sizeof(::Smoother) );
      instance.SetNew(&new_Smoother);
      instance.SetNewArray(&newArray_Smoother);
      instance.SetDelete(&delete_Smoother);
      instance.SetDeleteArray(&deleteArray_Smoother);
      instance.SetDestructor(&destruct_Smoother);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Smoother*)
   {
      return GenerateInitInstanceLocal((::Smoother*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Smoother*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Smoother_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Smoother*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Analyzer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Analyzer_Dictionary();
   static void delete_Analyzer(void *p);
   static void deleteArray_Analyzer(void *p);
   static void destruct_Analyzer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analyzer*)
   {
      ::Analyzer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Analyzer),0);
      static ::ROOT::TGenericClassInfo 
         instance("Analyzer", "./Analyzer.h", 11,
                  typeid(::Analyzer), DefineBehavior(ptr, ptr),
                  0, &Analyzer_Dictionary, isa_proxy, 0,
                  sizeof(::Analyzer) );
      instance.SetDelete(&delete_Analyzer);
      instance.SetDeleteArray(&deleteArray_Analyzer);
      instance.SetDestructor(&destruct_Analyzer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analyzer*)
   {
      return GenerateInitInstanceLocal((::Analyzer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analyzer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Analyzer_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Analyzer*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void BufferedReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void BufferedReader_Dictionary();
   static void *new_BufferedReader(void *p = 0);
   static void *newArray_BufferedReader(Long_t size, void *p);
   static void delete_BufferedReader(void *p);
   static void deleteArray_BufferedReader(void *p);
   static void destruct_BufferedReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::BufferedReader*)
   {
      ::BufferedReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::BufferedReader),0);
      static ::ROOT::TGenericClassInfo 
         instance("BufferedReader", "./BufferedReader.h", 22,
                  typeid(::BufferedReader), DefineBehavior(ptr, ptr),
                  0, &BufferedReader_Dictionary, isa_proxy, 0,
                  sizeof(::BufferedReader) );
      instance.SetNew(&new_BufferedReader);
      instance.SetNewArray(&newArray_BufferedReader);
      instance.SetDelete(&delete_BufferedReader);
      instance.SetDeleteArray(&deleteArray_BufferedReader);
      instance.SetDestructor(&destruct_BufferedReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::BufferedReader*)
   {
      return GenerateInitInstanceLocal((::BufferedReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BufferedReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void BufferedReader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::BufferedReader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RawTreeReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RawTreeReader_Dictionary();
   static void *new_RawTreeReader(void *p = 0);
   static void *newArray_RawTreeReader(Long_t size, void *p);
   static void delete_RawTreeReader(void *p);
   static void deleteArray_RawTreeReader(void *p);
   static void destruct_RawTreeReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RawTreeReader*)
   {
      ::RawTreeReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RawTreeReader),0);
      static ::ROOT::TGenericClassInfo 
         instance("RawTreeReader", "./RawTreeReader.h", 13,
                  typeid(::RawTreeReader), DefineBehavior(ptr, ptr),
                  0, &RawTreeReader_Dictionary, isa_proxy, 0,
                  sizeof(::RawTreeReader) );
      instance.SetNew(&new_RawTreeReader);
      instance.SetNewArray(&newArray_RawTreeReader);
      instance.SetDelete(&delete_RawTreeReader);
      instance.SetDeleteArray(&deleteArray_RawTreeReader);
      instance.SetDestructor(&destruct_RawTreeReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RawTreeReader*)
   {
      return GenerateInitInstanceLocal((::RawTreeReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RawTreeReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RawTreeReader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RawTreeReader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CalibrationData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CalibrationData(void *p = 0);
   static void *newArray_CalibrationData(Long_t size, void *p);
   static void delete_CalibrationData(void *p);
   static void deleteArray_CalibrationData(void *p);
   static void destruct_CalibrationData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CalibrationData*)
   {
      ::CalibrationData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CalibrationData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CalibrationData", ::CalibrationData::Class_Version(), "./CalibrationData.h", 17,
                  typeid(::CalibrationData), DefineBehavior(ptr, ptr),
                  &::CalibrationData::Dictionary, isa_proxy, 4,
                  sizeof(::CalibrationData) );
      instance.SetNew(&new_CalibrationData);
      instance.SetNewArray(&newArray_CalibrationData);
      instance.SetDelete(&delete_CalibrationData);
      instance.SetDeleteArray(&deleteArray_CalibrationData);
      instance.SetDestructor(&destruct_CalibrationData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CalibrationData*)
   {
      return GenerateInitInstanceLocal((::CalibrationData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CalibrationData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void CalibrationList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CalibrationList(void *p = 0);
   static void *newArray_CalibrationList(Long_t size, void *p);
   static void delete_CalibrationList(void *p);
   static void deleteArray_CalibrationList(void *p);
   static void destruct_CalibrationList(void *p);
   static Long64_t merge_CalibrationList(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CalibrationList*)
   {
      ::CalibrationList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CalibrationList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CalibrationList", ::CalibrationList::Class_Version(), "./CalibrationList.h", 12,
                  typeid(::CalibrationList), DefineBehavior(ptr, ptr),
                  &::CalibrationList::Dictionary, isa_proxy, 4,
                  sizeof(::CalibrationList) );
      instance.SetNew(&new_CalibrationList);
      instance.SetNewArray(&newArray_CalibrationList);
      instance.SetDelete(&delete_CalibrationList);
      instance.SetDeleteArray(&deleteArray_CalibrationList);
      instance.SetDestructor(&destruct_CalibrationList);
      instance.SetMerge(&merge_CalibrationList);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CalibrationList*)
   {
      return GenerateInitInstanceLocal((::CalibrationList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CalibrationList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void DataReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DataReader_Dictionary();
   static void *new_DataReader(void *p = 0);
   static void *newArray_DataReader(Long_t size, void *p);
   static void delete_DataReader(void *p);
   static void deleteArray_DataReader(void *p);
   static void destruct_DataReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DataReader*)
   {
      ::DataReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::DataReader),0);
      static ::ROOT::TGenericClassInfo 
         instance("DataReader", "./DataReader.h", 31,
                  typeid(::DataReader), DefineBehavior(ptr, ptr),
                  0, &DataReader_Dictionary, isa_proxy, 0,
                  sizeof(::DataReader) );
      instance.SetNew(&new_DataReader);
      instance.SetNewArray(&newArray_DataReader);
      instance.SetDelete(&delete_DataReader);
      instance.SetDeleteArray(&deleteArray_DataReader);
      instance.SetDestructor(&destruct_DataReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DataReader*)
   {
      return GenerateInitInstanceLocal((::DataReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DataReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DataReader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::DataReader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void EpgFitFunction_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void EpgFitFunction_Dictionary();
   static void delete_EpgFitFunction(void *p);
   static void deleteArray_EpgFitFunction(void *p);
   static void destruct_EpgFitFunction(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EpgFitFunction*)
   {
      ::EpgFitFunction *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::EpgFitFunction),0);
      static ::ROOT::TGenericClassInfo 
         instance("EpgFitFunction", "./EpgFitFunction.h", 12,
                  typeid(::EpgFitFunction), DefineBehavior(ptr, ptr),
                  0, &EpgFitFunction_Dictionary, isa_proxy, 0,
                  sizeof(::EpgFitFunction) );
      instance.SetDelete(&delete_EpgFitFunction);
      instance.SetDeleteArray(&deleteArray_EpgFitFunction);
      instance.SetDestructor(&destruct_EpgFitFunction);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EpgFitFunction*)
   {
      return GenerateInitInstanceLocal((::EpgFitFunction*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EpgFitFunction*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void EpgFitFunction_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::EpgFitFunction*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Header_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Header_Dictionary();
   static void *new_Header(void *p = 0);
   static void *newArray_Header(Long_t size, void *p);
   static void delete_Header(void *p);
   static void deleteArray_Header(void *p);
   static void destruct_Header(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Header*)
   {
      ::Header *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Header),0);
      static ::ROOT::TGenericClassInfo 
         instance("Header", "./Header.h", 13,
                  typeid(::Header), DefineBehavior(ptr, ptr),
                  0, &Header_Dictionary, isa_proxy, 0,
                  sizeof(::Header) );
      instance.SetNew(&new_Header);
      instance.SetNewArray(&newArray_Header);
      instance.SetDelete(&delete_Header);
      instance.SetDeleteArray(&deleteArray_Header);
      instance.SetDestructor(&destruct_Header);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Header*)
   {
      return GenerateInitInstanceLocal((::Header*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Header*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Header_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Header*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void NdatReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void NdatReader_Dictionary();
   static void delete_NdatReader(void *p);
   static void deleteArray_NdatReader(void *p);
   static void destruct_NdatReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::NdatReader*)
   {
      ::NdatReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::NdatReader),0);
      static ::ROOT::TGenericClassInfo 
         instance("NdatReader", "./NdatReader.h", 10,
                  typeid(::NdatReader), DefineBehavior(ptr, ptr),
                  0, &NdatReader_Dictionary, isa_proxy, 0,
                  sizeof(::NdatReader) );
      instance.SetDelete(&delete_NdatReader);
      instance.SetDeleteArray(&deleteArray_NdatReader);
      instance.SetDestructor(&destruct_NdatReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::NdatReader*)
   {
      return GenerateInitInstanceLocal((::NdatReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::NdatReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void NdatReader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::NdatReader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void NdatWriter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void NdatWriter_Dictionary();
   static void delete_NdatWriter(void *p);
   static void deleteArray_NdatWriter(void *p);
   static void destruct_NdatWriter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::NdatWriter*)
   {
      ::NdatWriter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::NdatWriter),0);
      static ::ROOT::TGenericClassInfo 
         instance("NdatWriter", "./NdatWriter.h", 12,
                  typeid(::NdatWriter), DefineBehavior(ptr, ptr),
                  0, &NdatWriter_Dictionary, isa_proxy, 0,
                  sizeof(::NdatWriter) );
      instance.SetDelete(&delete_NdatWriter);
      instance.SetDeleteArray(&deleteArray_NdatWriter);
      instance.SetDestructor(&destruct_NdatWriter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::NdatWriter*)
   {
      return GenerateInitInstanceLocal((::NdatWriter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::NdatWriter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void NdatWriter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::NdatWriter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Plotter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Plotter_Dictionary();

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Plotter*)
   {
      ::Plotter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Plotter),0);
      static ::ROOT::TGenericClassInfo 
         instance("Plotter", "./Plotter.h", 16,
                  typeid(::Plotter), DefineBehavior(ptr, ptr),
                  0, &Plotter_Dictionary, isa_proxy, 0,
                  sizeof(::Plotter) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Plotter*)
   {
      return GenerateInitInstanceLocal((::Plotter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Plotter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Plotter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Plotter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Quantity_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Quantity_Dictionary();
   static void *new_Quantity(void *p = 0);
   static void *newArray_Quantity(Long_t size, void *p);
   static void delete_Quantity(void *p);
   static void deleteArray_Quantity(void *p);
   static void destruct_Quantity(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Quantity*)
   {
      ::Quantity *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Quantity),0);
      static ::ROOT::TGenericClassInfo 
         instance("Quantity", "./Quantity.h", 8,
                  typeid(::Quantity), DefineBehavior(ptr, ptr),
                  0, &Quantity_Dictionary, isa_proxy, 0,
                  sizeof(::Quantity) );
      instance.SetNew(&new_Quantity);
      instance.SetNewArray(&newArray_Quantity);
      instance.SetDelete(&delete_Quantity);
      instance.SetDeleteArray(&deleteArray_Quantity);
      instance.SetDestructor(&destruct_Quantity);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Quantity*)
   {
      return GenerateInitInstanceLocal((::Quantity*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Quantity*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Quantity_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Quantity*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Plotter2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Plotter2_Dictionary();
   static void *new_Plotter2(void *p = 0);
   static void *newArray_Plotter2(Long_t size, void *p);
   static void delete_Plotter2(void *p);
   static void deleteArray_Plotter2(void *p);
   static void destruct_Plotter2(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Plotter2*)
   {
      ::Plotter2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Plotter2),0);
      static ::ROOT::TGenericClassInfo 
         instance("Plotter2", "./Plotter2.h", 18,
                  typeid(::Plotter2), DefineBehavior(ptr, ptr),
                  0, &Plotter2_Dictionary, isa_proxy, 0,
                  sizeof(::Plotter2) );
      instance.SetNew(&new_Plotter2);
      instance.SetNewArray(&newArray_Plotter2);
      instance.SetDelete(&delete_Plotter2);
      instance.SetDeleteArray(&deleteArray_Plotter2);
      instance.SetDestructor(&destruct_Plotter2);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Plotter2*)
   {
      return GenerateInitInstanceLocal((::Plotter2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Plotter2*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Plotter2_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Plotter2*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RawFileReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RawFileReader_Dictionary();
   static void *new_RawFileReader(void *p = 0);
   static void *newArray_RawFileReader(Long_t size, void *p);
   static void delete_RawFileReader(void *p);
   static void deleteArray_RawFileReader(void *p);
   static void destruct_RawFileReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RawFileReader*)
   {
      ::RawFileReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RawFileReader),0);
      static ::ROOT::TGenericClassInfo 
         instance("RawFileReader", "./RawFileReader.h", 12,
                  typeid(::RawFileReader), DefineBehavior(ptr, ptr),
                  0, &RawFileReader_Dictionary, isa_proxy, 0,
                  sizeof(::RawFileReader) );
      instance.SetNew(&new_RawFileReader);
      instance.SetNewArray(&newArray_RawFileReader);
      instance.SetDelete(&delete_RawFileReader);
      instance.SetDeleteArray(&deleteArray_RawFileReader);
      instance.SetDestructor(&destruct_RawFileReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RawFileReader*)
   {
      return GenerateInitInstanceLocal((::RawFileReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RawFileReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RawFileReader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RawFileReader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TreeFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TreeFilter_Dictionary();
   static void *new_TreeFilter(void *p = 0);
   static void *newArray_TreeFilter(Long_t size, void *p);
   static void delete_TreeFilter(void *p);
   static void deleteArray_TreeFilter(void *p);
   static void destruct_TreeFilter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TreeFilter*)
   {
      ::TreeFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TreeFilter),0);
      static ::ROOT::TGenericClassInfo 
         instance("TreeFilter", "./TreeFilter.h", 9,
                  typeid(::TreeFilter), DefineBehavior(ptr, ptr),
                  0, &TreeFilter_Dictionary, isa_proxy, 0,
                  sizeof(::TreeFilter) );
      instance.SetNew(&new_TreeFilter);
      instance.SetNewArray(&newArray_TreeFilter);
      instance.SetDelete(&delete_TreeFilter);
      instance.SetDeleteArray(&deleteArray_TreeFilter);
      instance.SetDestructor(&destruct_TreeFilter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TreeFilter*)
   {
      return GenerateInitInstanceLocal((::TreeFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreeFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TreeFilter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TreeFilter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RDKReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RDKReader_Dictionary();
   static void delete_RDKReader(void *p);
   static void deleteArray_RDKReader(void *p);
   static void destruct_RDKReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RDKReader*)
   {
      ::RDKReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RDKReader),0);
      static ::ROOT::TGenericClassInfo 
         instance("RDKReader", "./RDKReader.h", 11,
                  typeid(::RDKReader), DefineBehavior(ptr, ptr),
                  0, &RDKReader_Dictionary, isa_proxy, 0,
                  sizeof(::RDKReader) );
      instance.SetDelete(&delete_RDKReader);
      instance.SetDeleteArray(&deleteArray_RDKReader);
      instance.SetDestructor(&destruct_RDKReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RDKReader*)
   {
      return GenerateInitInstanceLocal((::RDKReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RDKReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RDKReader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::RDKReader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ThreadedAnalyzer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ThreadedAnalyzer_Dictionary();
   static void *new_ThreadedAnalyzer(void *p = 0);
   static void *newArray_ThreadedAnalyzer(Long_t size, void *p);
   static void delete_ThreadedAnalyzer(void *p);
   static void deleteArray_ThreadedAnalyzer(void *p);
   static void destruct_ThreadedAnalyzer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ThreadedAnalyzer*)
   {
      ::ThreadedAnalyzer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ThreadedAnalyzer),0);
      static ::ROOT::TGenericClassInfo 
         instance("ThreadedAnalyzer", "./ThreadedAnalyzer.h", 27,
                  typeid(::ThreadedAnalyzer), DefineBehavior(ptr, ptr),
                  0, &ThreadedAnalyzer_Dictionary, isa_proxy, 0,
                  sizeof(::ThreadedAnalyzer) );
      instance.SetNew(&new_ThreadedAnalyzer);
      instance.SetNewArray(&newArray_ThreadedAnalyzer);
      instance.SetDelete(&delete_ThreadedAnalyzer);
      instance.SetDeleteArray(&deleteArray_ThreadedAnalyzer);
      instance.SetDestructor(&destruct_ThreadedAnalyzer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ThreadedAnalyzer*)
   {
      return GenerateInitInstanceLocal((::ThreadedAnalyzer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ThreadedAnalyzer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ThreadedAnalyzer_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ThreadedAnalyzer*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR_Dictionary();
   static void *new_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p = 0);
   static void *newArray_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(Long_t size, void *p);
   static void delete_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p);
   static void deleteArray_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p);
   static void destruct_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::queue<Task,deque<Task,allocator<Task> > >*)
   {
      ::queue<Task,deque<Task,allocator<Task> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::queue<Task,deque<Task,allocator<Task> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("queue<Task,deque<Task,allocator<Task> > >", "prec_stl/queue", 28,
                  typeid(::queue<Task,deque<Task,allocator<Task> > >), DefineBehavior(ptr, ptr),
                  0, &queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(::queue<Task,deque<Task,allocator<Task> > >) );
      instance.SetNew(&new_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR);
      instance.SetNewArray(&newArray_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR);
      instance.SetDelete(&delete_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR);
      instance.SetDestructor(&destruct_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::queue<Task,deque<Task,allocator<Task> > >*)
   {
      return GenerateInitInstanceLocal((::queue<Task,deque<Task,allocator<Task> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::queue<Task,deque<Task,allocator<Task> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::queue<Task,deque<Task,allocator<Task> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SecondPass_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SecondPass_Dictionary();
   static void delete_SecondPass(void *p);
   static void deleteArray_SecondPass(void *p);
   static void destruct_SecondPass(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SecondPass*)
   {
      ::SecondPass *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SecondPass),0);
      static ::ROOT::TGenericClassInfo 
         instance("SecondPass", "./SecondPass.h", 16,
                  typeid(::SecondPass), DefineBehavior(ptr, ptr),
                  0, &SecondPass_Dictionary, isa_proxy, 0,
                  sizeof(::SecondPass) );
      instance.SetDelete(&delete_SecondPass);
      instance.SetDeleteArray(&deleteArray_SecondPass);
      instance.SetDestructor(&destruct_SecondPass);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SecondPass*)
   {
      return GenerateInitInstanceLocal((::SecondPass*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SecondPass*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SecondPass_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SecondPass*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Runnable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Runnable_Dictionary();
   static void delete_Runnable(void *p);
   static void deleteArray_Runnable(void *p);
   static void destruct_Runnable(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Runnable*)
   {
      ::Runnable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Runnable),0);
      static ::ROOT::TGenericClassInfo 
         instance("Runnable", "./Runnable.h", 8,
                  typeid(::Runnable), DefineBehavior(ptr, ptr),
                  0, &Runnable_Dictionary, isa_proxy, 0,
                  sizeof(::Runnable) );
      instance.SetDelete(&delete_Runnable);
      instance.SetDeleteArray(&deleteArray_Runnable);
      instance.SetDestructor(&destruct_Runnable);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Runnable*)
   {
      return GenerateInitInstanceLocal((::Runnable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Runnable*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Runnable_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Runnable*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ThreadRunner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ThreadRunner_Dictionary();
   static void delete_ThreadRunner(void *p);
   static void deleteArray_ThreadRunner(void *p);
   static void destruct_ThreadRunner(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ThreadRunner*)
   {
      ::ThreadRunner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ThreadRunner),0);
      static ::ROOT::TGenericClassInfo 
         instance("ThreadRunner", "./Threads.h", 19,
                  typeid(::ThreadRunner), DefineBehavior(ptr, ptr),
                  0, &ThreadRunner_Dictionary, isa_proxy, 0,
                  sizeof(::ThreadRunner) );
      instance.SetDelete(&delete_ThreadRunner);
      instance.SetDeleteArray(&deleteArray_ThreadRunner);
      instance.SetDestructor(&destruct_ThreadRunner);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ThreadRunner*)
   {
      return GenerateInitInstanceLocal((::ThreadRunner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ThreadRunner*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ThreadRunner_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ThreadRunner*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ThreadQueue_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ThreadQueue_Dictionary();
   static void delete_ThreadQueue(void *p);
   static void deleteArray_ThreadQueue(void *p);
   static void destruct_ThreadQueue(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ThreadQueue*)
   {
      ::ThreadQueue *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ThreadQueue),0);
      static ::ROOT::TGenericClassInfo 
         instance("ThreadQueue", "./Threads.h", 33,
                  typeid(::ThreadQueue), DefineBehavior(ptr, ptr),
                  0, &ThreadQueue_Dictionary, isa_proxy, 0,
                  sizeof(::ThreadQueue) );
      instance.SetDelete(&delete_ThreadQueue);
      instance.SetDeleteArray(&deleteArray_ThreadQueue);
      instance.SetDestructor(&destruct_ThreadQueue);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ThreadQueue*)
   {
      return GenerateInitInstanceLocal((::ThreadQueue*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ThreadQueue*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ThreadQueue_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ThreadQueue*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void MultiThread_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void MultiThread_Dictionary();
   static void delete_MultiThread(void *p);
   static void deleteArray_MultiThread(void *p);
   static void destruct_MultiThread(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MultiThread*)
   {
      ::MultiThread *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::MultiThread),0);
      static ::ROOT::TGenericClassInfo 
         instance("MultiThread", "./Threads.h", 64,
                  typeid(::MultiThread), DefineBehavior(ptr, ptr),
                  0, &MultiThread_Dictionary, isa_proxy, 0,
                  sizeof(::MultiThread) );
      instance.SetDelete(&delete_MultiThread);
      instance.SetDeleteArray(&deleteArray_MultiThread);
      instance.SetDestructor(&destruct_MultiThread);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MultiThread*)
   {
      return GenerateInitInstanceLocal((::MultiThread*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MultiThread*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void MultiThread_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::MultiThread*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void EpFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void EpFitter_Dictionary();
   static void delete_EpFitter(void *p);
   static void deleteArray_EpFitter(void *p);
   static void destruct_EpFitter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EpFitter*)
   {
      ::EpFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::EpFitter),0);
      static ::ROOT::TGenericClassInfo 
         instance("EpFitter", "./EpFitter.h", 12,
                  typeid(::EpFitter), DefineBehavior(ptr, ptr),
                  0, &EpFitter_Dictionary, isa_proxy, 0,
                  sizeof(::EpFitter) );
      instance.SetDelete(&delete_EpFitter);
      instance.SetDeleteArray(&deleteArray_EpFitter);
      instance.SetDestructor(&destruct_EpFitter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EpFitter*)
   {
      return GenerateInitInstanceLocal((::EpFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EpFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void EpFitter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::EpFitter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TreeReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TreeReader_Dictionary();
   static void *new_TreeReader(void *p = 0);
   static void *newArray_TreeReader(Long_t size, void *p);
   static void delete_TreeReader(void *p);
   static void deleteArray_TreeReader(void *p);
   static void destruct_TreeReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TreeReader*)
   {
      ::TreeReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TreeReader),0);
      static ::ROOT::TGenericClassInfo 
         instance("TreeReader", "./TreeReader.h", 12,
                  typeid(::TreeReader), DefineBehavior(ptr, ptr),
                  0, &TreeReader_Dictionary, isa_proxy, 0,
                  sizeof(::TreeReader) );
      instance.SetNew(&new_TreeReader);
      instance.SetNewArray(&newArray_TreeReader);
      instance.SetDelete(&delete_TreeReader);
      instance.SetDeleteArray(&deleteArray_TreeReader);
      instance.SetDestructor(&destruct_TreeReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TreeReader*)
   {
      return GenerateInitInstanceLocal((::TreeReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreeReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TreeReader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TreeReader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ExeWrapper_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ExeWrapper_Dictionary();
   static void *new_ExeWrapper(void *p = 0);
   static void *newArray_ExeWrapper(Long_t size, void *p);
   static void delete_ExeWrapper(void *p);
   static void deleteArray_ExeWrapper(void *p);
   static void destruct_ExeWrapper(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ExeWrapper*)
   {
      ::ExeWrapper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ExeWrapper),0);
      static ::ROOT::TGenericClassInfo 
         instance("ExeWrapper", "./ExeWrapper.h", 10,
                  typeid(::ExeWrapper), DefineBehavior(ptr, ptr),
                  0, &ExeWrapper_Dictionary, isa_proxy, 0,
                  sizeof(::ExeWrapper) );
      instance.SetNew(&new_ExeWrapper);
      instance.SetNewArray(&newArray_ExeWrapper);
      instance.SetDelete(&delete_ExeWrapper);
      instance.SetDeleteArray(&deleteArray_ExeWrapper);
      instance.SetDestructor(&destruct_ExeWrapper);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ExeWrapper*)
   {
      return GenerateInitInstanceLocal((::ExeWrapper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ExeWrapper*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ExeWrapper_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ExeWrapper*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void EventDrawer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void EventDrawer_Dictionary();
   static void *new_EventDrawer(void *p = 0);
   static void *newArray_EventDrawer(Long_t size, void *p);
   static void delete_EventDrawer(void *p);
   static void deleteArray_EventDrawer(void *p);
   static void destruct_EventDrawer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventDrawer*)
   {
      ::EventDrawer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::EventDrawer),0);
      static ::ROOT::TGenericClassInfo 
         instance("EventDrawer", "./EventDrawer.h", 14,
                  typeid(::EventDrawer), DefineBehavior(ptr, ptr),
                  0, &EventDrawer_Dictionary, isa_proxy, 0,
                  sizeof(::EventDrawer) );
      instance.SetNew(&new_EventDrawer);
      instance.SetNewArray(&newArray_EventDrawer);
      instance.SetDelete(&delete_EventDrawer);
      instance.SetDeleteArray(&deleteArray_EventDrawer);
      instance.SetDestructor(&destruct_EventDrawer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventDrawer*)
   {
      return GenerateInitInstanceLocal((::EventDrawer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventDrawer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void EventDrawer_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::EventDrawer*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void GFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void GFitter_Dictionary();
   static void delete_GFitter(void *p);
   static void deleteArray_GFitter(void *p);
   static void destruct_GFitter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GFitter*)
   {
      ::GFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::GFitter),0);
      static ::ROOT::TGenericClassInfo 
         instance("GFitter", "./GFitter.h", 12,
                  typeid(::GFitter), DefineBehavior(ptr, ptr),
                  0, &GFitter_Dictionary, isa_proxy, 0,
                  sizeof(::GFitter) );
      instance.SetDelete(&delete_GFitter);
      instance.SetDeleteArray(&deleteArray_GFitter);
      instance.SetDestructor(&destruct_GFitter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GFitter*)
   {
      return GenerateInitInstanceLocal((::GFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void GFitter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::GFitter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void EpFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void EpFilter_Dictionary();
   static void *new_EpFilter(void *p = 0);
   static void *newArray_EpFilter(Long_t size, void *p);
   static void delete_EpFilter(void *p);
   static void deleteArray_EpFilter(void *p);
   static void destruct_EpFilter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EpFilter*)
   {
      ::EpFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::EpFilter),0);
      static ::ROOT::TGenericClassInfo 
         instance("EpFilter", "./EpFilter.h", 8,
                  typeid(::EpFilter), DefineBehavior(ptr, ptr),
                  0, &EpFilter_Dictionary, isa_proxy, 0,
                  sizeof(::EpFilter) );
      instance.SetNew(&new_EpFilter);
      instance.SetNewArray(&newArray_EpFilter);
      instance.SetDelete(&delete_EpFilter);
      instance.SetDeleteArray(&deleteArray_EpFilter);
      instance.SetDestructor(&destruct_EpFilter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EpFilter*)
   {
      return GenerateInitInstanceLocal((::EpFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EpFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void EpFilter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::EpFilter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void epComp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void epComp_Dictionary();
   static void *new_epComp(void *p = 0);
   static void *newArray_epComp(Long_t size, void *p);
   static void delete_epComp(void *p);
   static void deleteArray_epComp(void *p);
   static void destruct_epComp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::epComp*)
   {
      ::epComp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::epComp),0);
      static ::ROOT::TGenericClassInfo 
         instance("epComp", "./CompareData.h", 13,
                  typeid(::epComp), DefineBehavior(ptr, ptr),
                  0, &epComp_Dictionary, isa_proxy, 0,
                  sizeof(::epComp) );
      instance.SetNew(&new_epComp);
      instance.SetNewArray(&newArray_epComp);
      instance.SetDelete(&delete_epComp);
      instance.SetDeleteArray(&deleteArray_epComp);
      instance.SetDestructor(&destruct_epComp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::epComp*)
   {
      return GenerateInitInstanceLocal((::epComp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::epComp*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void epComp_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::epComp*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CompareData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CompareData_Dictionary();
   static void delete_CompareData(void *p);
   static void deleteArray_CompareData(void *p);
   static void destruct_CompareData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CompareData*)
   {
      ::CompareData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CompareData),0);
      static ::ROOT::TGenericClassInfo 
         instance("CompareData", "./CompareData.h", 25,
                  typeid(::CompareData), DefineBehavior(ptr, ptr),
                  0, &CompareData_Dictionary, isa_proxy, 0,
                  sizeof(::CompareData) );
      instance.SetDelete(&delete_CompareData);
      instance.SetDeleteArray(&deleteArray_CompareData);
      instance.SetDestructor(&destruct_CompareData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CompareData*)
   {
      return GenerateInitInstanceLocal((::CompareData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CompareData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CompareData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CompareData*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
TClass *CalibrationData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationData::Class_Name()
{
   return "CalibrationData";
}

//______________________________________________________________________________
const char *CalibrationData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalibrationData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalibrationData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalibrationData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalibrationData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *CalibrationList::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationList::Class_Name()
{
   return "CalibrationList";
}

//______________________________________________________________________________
const char *CalibrationList::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalibrationList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationList::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalibrationList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationList::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalibrationList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationList::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalibrationList*)0x0)->GetClass();
   return fgIsA;
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Analyzer(void *p) {
      delete ((::Analyzer*)p);
   }
   static void deleteArray_Analyzer(void *p) {
      delete [] ((::Analyzer*)p);
   }
   static void destruct_Analyzer(void *p) {
      typedef ::Analyzer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analyzer

namespace ROOT {
   // Wrappers around operator new
   static void *new_ThreadedAnalyzer(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ThreadedAnalyzer : new ::ThreadedAnalyzer;
   }
   static void *newArray_ThreadedAnalyzer(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ThreadedAnalyzer[nElements] : new ::ThreadedAnalyzer[nElements];
   }
   // Wrapper around operator delete
   static void delete_ThreadedAnalyzer(void *p) {
      delete ((::ThreadedAnalyzer*)p);
   }
   static void deleteArray_ThreadedAnalyzer(void *p) {
      delete [] ((::ThreadedAnalyzer*)p);
   }
   static void destruct_ThreadedAnalyzer(void *p) {
      typedef ::ThreadedAnalyzer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ThreadedAnalyzer

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SecondPass(void *p) {
      delete ((::SecondPass*)p);
   }
   static void deleteArray_SecondPass(void *p) {
      delete [] ((::SecondPass*)p);
   }
   static void destruct_SecondPass(void *p) {
      typedef ::SecondPass current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SecondPass

namespace ROOT {
   // Wrappers around operator new
   static void *new_DataReader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DataReader : new ::DataReader;
   }
   static void *newArray_DataReader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::DataReader[nElements] : new ::DataReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_DataReader(void *p) {
      delete ((::DataReader*)p);
   }
   static void deleteArray_DataReader(void *p) {
      delete [] ((::DataReader*)p);
   }
   static void destruct_DataReader(void *p) {
      typedef ::DataReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DataReader

namespace ROOT {
   // Wrapper around operator delete
   static void delete_NdatReader(void *p) {
      delete ((::NdatReader*)p);
   }
   static void deleteArray_NdatReader(void *p) {
      delete [] ((::NdatReader*)p);
   }
   static void destruct_NdatReader(void *p) {
      typedef ::NdatReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::NdatReader

namespace ROOT {
   // Wrapper around operator delete
   static void delete_NdatWriter(void *p) {
      delete ((::NdatWriter*)p);
   }
   static void deleteArray_NdatWriter(void *p) {
      delete [] ((::NdatWriter*)p);
   }
   static void destruct_NdatWriter(void *p) {
      typedef ::NdatWriter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::NdatWriter

namespace ROOT {
   // Wrapper around operator delete
   static void delete_RDKReader(void *p) {
      delete ((::RDKReader*)p);
   }
   static void deleteArray_RDKReader(void *p) {
      delete [] ((::RDKReader*)p);
   }
   static void destruct_RDKReader(void *p) {
      typedef ::RDKReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RDKReader

namespace ROOT {
   // Wrappers around operator new
   static void *new_RawTreeReader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RawTreeReader : new ::RawTreeReader;
   }
   static void *newArray_RawTreeReader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RawTreeReader[nElements] : new ::RawTreeReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_RawTreeReader(void *p) {
      delete ((::RawTreeReader*)p);
   }
   static void deleteArray_RawTreeReader(void *p) {
      delete [] ((::RawTreeReader*)p);
   }
   static void destruct_RawTreeReader(void *p) {
      typedef ::RawTreeReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RawTreeReader

namespace ROOT {
   // Wrappers around operator new
   static void *new_TreeFilter(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeFilter : new ::TreeFilter;
   }
   static void *newArray_TreeFilter(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeFilter[nElements] : new ::TreeFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreeFilter(void *p) {
      delete ((::TreeFilter*)p);
   }
   static void deleteArray_TreeFilter(void *p) {
      delete [] ((::TreeFilter*)p);
   }
   static void destruct_TreeFilter(void *p) {
      typedef ::TreeFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TreeFilter

namespace ROOT {
   // Wrappers around operator new
   static void *new_TreeReader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeReader : new ::TreeReader;
   }
   static void *newArray_TreeReader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TreeReader[nElements] : new ::TreeReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreeReader(void *p) {
      delete ((::TreeReader*)p);
   }
   static void deleteArray_TreeReader(void *p) {
      delete [] ((::TreeReader*)p);
   }
   static void destruct_TreeReader(void *p) {
      typedef ::TreeReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TreeReader

namespace ROOT {
} // end of namespace ROOT for class ::Plotter

namespace ROOT {
   // Wrappers around operator new
   static void *new_Plotter2(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Plotter2 : new ::Plotter2;
   }
   static void *newArray_Plotter2(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Plotter2[nElements] : new ::Plotter2[nElements];
   }
   // Wrapper around operator delete
   static void delete_Plotter2(void *p) {
      delete ((::Plotter2*)p);
   }
   static void deleteArray_Plotter2(void *p) {
      delete [] ((::Plotter2*)p);
   }
   static void destruct_Plotter2(void *p) {
      typedef ::Plotter2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Plotter2

namespace ROOT {
   // Wrappers around operator new
   static void *new_RawFileReader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RawFileReader : new ::RawFileReader;
   }
   static void *newArray_RawFileReader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RawFileReader[nElements] : new ::RawFileReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_RawFileReader(void *p) {
      delete ((::RawFileReader*)p);
   }
   static void deleteArray_RawFileReader(void *p) {
      delete [] ((::RawFileReader*)p);
   }
   static void destruct_RawFileReader(void *p) {
      typedef ::RawFileReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RawFileReader

namespace ROOT {
   // Wrappers around operator new
   static void *new_BufferedReader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::BufferedReader : new ::BufferedReader;
   }
   static void *newArray_BufferedReader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::BufferedReader[nElements] : new ::BufferedReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_BufferedReader(void *p) {
      delete ((::BufferedReader*)p);
   }
   static void deleteArray_BufferedReader(void *p) {
      delete [] ((::BufferedReader*)p);
   }
   static void destruct_BufferedReader(void *p) {
      typedef ::BufferedReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::BufferedReader

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventDrawer(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventDrawer : new ::EventDrawer;
   }
   static void *newArray_EventDrawer(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventDrawer[nElements] : new ::EventDrawer[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventDrawer(void *p) {
      delete ((::EventDrawer*)p);
   }
   static void deleteArray_EventDrawer(void *p) {
      delete [] ((::EventDrawer*)p);
   }
   static void destruct_EventDrawer(void *p) {
      typedef ::EventDrawer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventDrawer

namespace ROOT {
   // Wrapper around operator delete
   static void delete_EpFitter(void *p) {
      delete ((::EpFitter*)p);
   }
   static void deleteArray_EpFitter(void *p) {
      delete [] ((::EpFitter*)p);
   }
   static void destruct_EpFitter(void *p) {
      typedef ::EpFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EpFitter

namespace ROOT {
   // Wrapper around operator delete
   static void delete_GFitter(void *p) {
      delete ((::GFitter*)p);
   }
   static void deleteArray_GFitter(void *p) {
      delete [] ((::GFitter*)p);
   }
   static void destruct_GFitter(void *p) {
      typedef ::GFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GFitter

namespace ROOT {
   // Wrapper around operator delete
   static void delete_EpgFitFunction(void *p) {
      delete ((::EpgFitFunction*)p);
   }
   static void deleteArray_EpgFitFunction(void *p) {
      delete [] ((::EpgFitFunction*)p);
   }
   static void destruct_EpgFitFunction(void *p) {
      typedef ::EpgFitFunction current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EpgFitFunction

namespace ROOT {
   // Wrappers around operator new
   static void *new_EpFilter(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EpFilter : new ::EpFilter;
   }
   static void *newArray_EpFilter(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EpFilter[nElements] : new ::EpFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_EpFilter(void *p) {
      delete ((::EpFilter*)p);
   }
   static void deleteArray_EpFilter(void *p) {
      delete [] ((::EpFilter*)p);
   }
   static void destruct_EpFilter(void *p) {
      typedef ::EpFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EpFilter

namespace ROOT {
   // Wrappers around operator new
   static void *new_Smoother(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Smoother : new ::Smoother;
   }
   static void *newArray_Smoother(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Smoother[nElements] : new ::Smoother[nElements];
   }
   // Wrapper around operator delete
   static void delete_Smoother(void *p) {
      delete ((::Smoother*)p);
   }
   static void deleteArray_Smoother(void *p) {
      delete [] ((::Smoother*)p);
   }
   static void destruct_Smoother(void *p) {
      typedef ::Smoother current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Smoother

namespace ROOT {
   // Wrappers around operator new
   static void *new_epEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::epEvent : new ::epEvent;
   }
   static void *newArray_epEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::epEvent[nElements] : new ::epEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_epEvent(void *p) {
      delete ((::epEvent*)p);
   }
   static void deleteArray_epEvent(void *p) {
      delete [] ((::epEvent*)p);
   }
   static void destruct_epEvent(void *p) {
      typedef ::epEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::epEvent

namespace ROOT {
   // Wrappers around operator new
   static void *new_BoardEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::BoardEvent : new ::BoardEvent;
   }
   static void *newArray_BoardEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::BoardEvent[nElements] : new ::BoardEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_BoardEvent(void *p) {
      delete ((::BoardEvent*)p);
   }
   static void deleteArray_BoardEvent(void *p) {
      delete [] ((::BoardEvent*)p);
   }
   static void destruct_BoardEvent(void *p) {
      typedef ::BoardEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::BoardEvent

namespace ROOT {
   // Wrappers around operator new
   static void *new_Entry(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Entry : new ::Entry;
   }
   static void *newArray_Entry(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Entry[nElements] : new ::Entry[nElements];
   }
   // Wrapper around operator delete
   static void delete_Entry(void *p) {
      delete ((::Entry*)p);
   }
   static void deleteArray_Entry(void *p) {
      delete [] ((::Entry*)p);
   }
   static void destruct_Entry(void *p) {
      typedef ::Entry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Entry

namespace ROOT {
   // Wrappers around operator new
   static void *new_RawData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RawData : new ::RawData;
   }
   static void *newArray_RawData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RawData[nElements] : new ::RawData[nElements];
   }
   // Wrapper around operator delete
   static void delete_RawData(void *p) {
      delete ((::RawData*)p);
   }
   static void deleteArray_RawData(void *p) {
      delete [] ((::RawData*)p);
   }
   static void destruct_RawData(void *p) {
      typedef ::RawData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RawData

namespace ROOT {
   // Wrappers around operator new
   static void *new_Recon(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Recon : new ::Recon;
   }
   static void *newArray_Recon(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Recon[nElements] : new ::Recon[nElements];
   }
   // Wrapper around operator delete
   static void delete_Recon(void *p) {
      delete ((::Recon*)p);
   }
   static void deleteArray_Recon(void *p) {
      delete [] ((::Recon*)p);
   }
   static void destruct_Recon(void *p) {
      typedef ::Recon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Recon

namespace ROOT {
   // Wrappers around operator new
   static void *new_NData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::NData : new ::NData;
   }
   static void *newArray_NData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::NData[nElements] : new ::NData[nElements];
   }
   // Wrapper around operator delete
   static void delete_NData(void *p) {
      delete ((::NData*)p);
   }
   static void deleteArray_NData(void *p) {
      delete [] ((::NData*)p);
   }
   static void destruct_NData(void *p) {
      typedef ::NData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::NData

namespace ROOT {
   // Wrappers around operator new
   static void *new_Header(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Header : new ::Header;
   }
   static void *newArray_Header(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Header[nElements] : new ::Header[nElements];
   }
   // Wrapper around operator delete
   static void delete_Header(void *p) {
      delete ((::Header*)p);
   }
   static void deleteArray_Header(void *p) {
      delete [] ((::Header*)p);
   }
   static void destruct_Header(void *p) {
      typedef ::Header current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Header

//______________________________________________________________________________
void CalibrationData::Streamer(TBuffer &R__b)
{
   // Stream an object of class CalibrationData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CalibrationData::Class(),this);
   } else {
      R__b.WriteClassBuffer(CalibrationData::Class(),this);
   }
}

//______________________________________________________________________________
void CalibrationData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CalibrationData.
      typedef ::CalibrationData msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "file", (void*)&file);
      R__insp.InspectMember("string", (void*)&file, "file.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "series", &series);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start", &start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fit[14][4]", fit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "config", &config);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CalibrationData(void *p) {
      return  p ? new(p) ::CalibrationData : new ::CalibrationData;
   }
   static void *newArray_CalibrationData(Long_t nElements, void *p) {
      return p ? new(p) ::CalibrationData[nElements] : new ::CalibrationData[nElements];
   }
   // Wrapper around operator delete
   static void delete_CalibrationData(void *p) {
      delete ((::CalibrationData*)p);
   }
   static void deleteArray_CalibrationData(void *p) {
      delete [] ((::CalibrationData*)p);
   }
   static void destruct_CalibrationData(void *p) {
      typedef ::CalibrationData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CalibrationData

//______________________________________________________________________________
void CalibrationList::Streamer(TBuffer &R__b)
{
   // Stream an object of class CalibrationList.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CalibrationList::Class(),this);
   } else {
      R__b.WriteClassBuffer(CalibrationList::Class(),this);
   }
}

//______________________________________________________________________________
void CalibrationList::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CalibrationList.
      typedef ::CalibrationList msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*current", &current);
      TSortedList::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CalibrationList(void *p) {
      return  p ? new(p) ::CalibrationList : new ::CalibrationList;
   }
   static void *newArray_CalibrationList(Long_t nElements, void *p) {
      return p ? new(p) ::CalibrationList[nElements] : new ::CalibrationList[nElements];
   }
   // Wrapper around operator delete
   static void delete_CalibrationList(void *p) {
      delete ((::CalibrationList*)p);
   }
   static void deleteArray_CalibrationList(void *p) {
      delete [] ((::CalibrationList*)p);
   }
   static void destruct_CalibrationList(void *p) {
      typedef ::CalibrationList current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_CalibrationList(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::CalibrationList*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::CalibrationList

namespace ROOT {
   // Wrappers around operator new
   static void *new_Quantity(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Quantity : new ::Quantity;
   }
   static void *newArray_Quantity(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Quantity[nElements] : new ::Quantity[nElements];
   }
   // Wrapper around operator delete
   static void delete_Quantity(void *p) {
      delete ((::Quantity*)p);
   }
   static void deleteArray_Quantity(void *p) {
      delete [] ((::Quantity*)p);
   }
   static void destruct_Quantity(void *p) {
      typedef ::Quantity current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Quantity

namespace ROOT {
   // Wrappers around operator new
   static void *new_epComp(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::epComp : new ::epComp;
   }
   static void *newArray_epComp(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::epComp[nElements] : new ::epComp[nElements];
   }
   // Wrapper around operator delete
   static void delete_epComp(void *p) {
      delete ((::epComp*)p);
   }
   static void deleteArray_epComp(void *p) {
      delete [] ((::epComp*)p);
   }
   static void destruct_epComp(void *p) {
      typedef ::epComp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::epComp

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Runnable(void *p) {
      delete ((::Runnable*)p);
   }
   static void deleteArray_Runnable(void *p) {
      delete [] ((::Runnable*)p);
   }
   static void destruct_Runnable(void *p) {
      typedef ::Runnable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Runnable

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ThreadRunner(void *p) {
      delete ((::ThreadRunner*)p);
   }
   static void deleteArray_ThreadRunner(void *p) {
      delete [] ((::ThreadRunner*)p);
   }
   static void destruct_ThreadRunner(void *p) {
      typedef ::ThreadRunner current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ThreadRunner

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ThreadQueue(void *p) {
      delete ((::ThreadQueue*)p);
   }
   static void deleteArray_ThreadQueue(void *p) {
      delete [] ((::ThreadQueue*)p);
   }
   static void destruct_ThreadQueue(void *p) {
      typedef ::ThreadQueue current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ThreadQueue

namespace ROOT {
   // Wrapper around operator delete
   static void delete_MultiThread(void *p) {
      delete ((::MultiThread*)p);
   }
   static void deleteArray_MultiThread(void *p) {
      delete [] ((::MultiThread*)p);
   }
   static void destruct_MultiThread(void *p) {
      typedef ::MultiThread current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MultiThread

namespace ROOT {
   // Wrappers around operator new
   static void *new_ExeWrapper(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ExeWrapper : new ::ExeWrapper;
   }
   static void *newArray_ExeWrapper(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ExeWrapper[nElements] : new ::ExeWrapper[nElements];
   }
   // Wrapper around operator delete
   static void delete_ExeWrapper(void *p) {
      delete ((::ExeWrapper*)p);
   }
   static void deleteArray_ExeWrapper(void *p) {
      delete [] ((::ExeWrapper*)p);
   }
   static void destruct_ExeWrapper(void *p) {
      typedef ::ExeWrapper current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ExeWrapper

namespace ROOT {
   // Wrapper around operator delete
   static void delete_RDKException(void *p) {
      delete ((::RDKException*)p);
   }
   static void deleteArray_RDKException(void *p) {
      delete [] ((::RDKException*)p);
   }
   static void destruct_RDKException(void *p) {
      typedef ::RDKException current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RDKException

namespace ROOT {
   // Wrapper around operator delete
   static void delete_RDKConfig(void *p) {
      delete ((::RDKConfig*)p);
   }
   static void deleteArray_RDKConfig(void *p) {
      delete [] ((::RDKConfig*)p);
   }
   static void destruct_RDKConfig(void *p) {
      typedef ::RDKConfig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::RDKConfig

namespace ROOT {
   // Wrappers around operator new
   static void *new_Task(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Task : new ::Task;
   }
   static void *newArray_Task(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Task[nElements] : new ::Task[nElements];
   }
   // Wrapper around operator delete
   static void delete_Task(void *p) {
      delete ((::Task*)p);
   }
   static void deleteArray_Task(void *p) {
      delete [] ((::Task*)p);
   }
   static void destruct_Task(void *p) {
      typedef ::Task current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Task

namespace ROOT {
   // Wrappers around operator new
   static void *new_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::queue<Task,deque<Task,allocator<Task> > > : new ::queue<Task,deque<Task,allocator<Task> > >;
   }
   static void *newArray_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::queue<Task,deque<Task,allocator<Task> > >[nElements] : new ::queue<Task,deque<Task,allocator<Task> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p) {
      delete ((::queue<Task,deque<Task,allocator<Task> > >*)p);
   }
   static void deleteArray_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p) {
      delete [] ((::queue<Task,deque<Task,allocator<Task> > >*)p);
   }
   static void destruct_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void *p) {
      typedef ::queue<Task,deque<Task,allocator<Task> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::queue<Task,deque<Task,allocator<Task> > >

namespace ROOT {
   // Wrapper around operator delete
   static void delete_CompareData(void *p) {
      delete ((::CompareData*)p);
   }
   static void deleteArray_CompareData(void *p) {
      delete [] ((::CompareData*)p);
   }
   static void destruct_CompareData(void *p) {
      typedef ::CompareData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CompareData

namespace ROOT {
   void vectorlETaskgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETaskgR_Dictionary();
   static void *new_vectorlETaskgR(void *p = 0);
   static void *newArray_vectorlETaskgR(Long_t size, void *p);
   static void delete_vectorlETaskgR(void *p);
   static void deleteArray_vectorlETaskgR(void *p);
   static void destruct_vectorlETaskgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Task>*)
   {
      vector<Task> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Task>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Task>", -2, "prec_stl/vector", 49,
                  typeid(vector<Task>), DefineBehavior(ptr, ptr),
                  0, &vectorlETaskgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Task>) );
      instance.SetNew(&new_vectorlETaskgR);
      instance.SetNewArray(&newArray_vectorlETaskgR);
      instance.SetDelete(&delete_vectorlETaskgR);
      instance.SetDeleteArray(&deleteArray_vectorlETaskgR);
      instance.SetDestructor(&destruct_vectorlETaskgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Task> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Task>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETaskgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Task>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETaskgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Task> : new vector<Task>;
   }
   static void *newArray_vectorlETaskgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Task>[nElements] : new vector<Task>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETaskgR(void *p) {
      delete ((vector<Task>*)p);
   }
   static void deleteArray_vectorlETaskgR(void *p) {
      delete [] ((vector<Task>*)p);
   }
   static void destruct_vectorlETaskgR(void *p) {
      typedef vector<Task> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Task>

/********************************************************
* RDKDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableRDKDict();

extern "C" void G__set_cpp_environmentRDKDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("RDKHeaders.h");
  G__cpp_reset_tagtableRDKDict();
}
#include <new>
extern "C" int G__cpp_dllrevRDKDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* RDKConfig */
static int G__RDKDict_495_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RDKConfig* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RDKConfig(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) RDKConfig(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RDKConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_495_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RDKConfig*) G__getstructoffset())->getConfig((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_495_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) RDKConfig::getMode((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_495_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RDKConfig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RDKConfig(*(RDKConfig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RDKConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RDKConfig G__TRDKConfig;
static int G__RDKDict_495_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RDKConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RDKConfig*) (soff+(sizeof(RDKConfig)*i)))->~G__TRDKConfig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RDKConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RDKConfig*) (soff))->~G__TRDKConfig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_495_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RDKConfig* dest = (RDKConfig*) G__getstructoffset();
   *dest = *(RDKConfig*) libp->para[0].ref;
   const RDKConfig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RDKException */
static int G__RDKDict_509_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RDKException* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RDKException((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) RDKException((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RDKException));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_509_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const RDKException*) G__getstructoffset())->what());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_509_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RDKException* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RDKException(*(RDKException*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RDKException));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RDKException G__TRDKException;
static int G__RDKDict_509_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RDKException*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RDKException*) (soff+(sizeof(RDKException)*i)))->~G__TRDKException();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RDKException*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RDKException*) (soff))->~G__TRDKException();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_509_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RDKException* dest = (RDKException*) G__getstructoffset();
   *dest = *(RDKException*) libp->para[0].ref;
   const RDKException& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RawData */
// automatic default constructor
static int G__RDKDict_510_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawData[n];
     } else {
       p = new((void*) gvp) RawData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawData;
     } else {
       p = new((void*) gvp) RawData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_510_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RawData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RawData(*(RawData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RawData G__TRawData;
static int G__RDKDict_510_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RawData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RawData*) (soff+(sizeof(RawData)*i)))->~G__TRawData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RawData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RawData*) (soff))->~G__TRawData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_510_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawData* dest = (RawData*) G__getstructoffset();
   *dest = *(RawData*) libp->para[0].ref;
   const RawData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Recon */
// automatic default constructor
static int G__RDKDict_511_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Recon *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Recon[n];
     } else {
       p = new((void*) gvp) Recon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Recon;
     } else {
       p = new((void*) gvp) Recon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Recon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_511_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Recon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Recon(*(Recon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Recon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Recon G__TRecon;
static int G__RDKDict_511_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Recon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Recon*) (soff+(sizeof(Recon)*i)))->~G__TRecon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Recon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Recon*) (soff))->~G__TRecon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_511_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Recon* dest = (Recon*) G__getstructoffset();
   *dest = *(Recon*) libp->para[0].ref;
   const Recon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Entry */
// automatic default constructor
static int G__RDKDict_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Entry *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Entry[n];
     } else {
       p = new((void*) gvp) Entry[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Entry;
     } else {
       p = new((void*) gvp) Entry;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Entry));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_512_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Entry* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Entry(*(Entry*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Entry));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Entry G__TEntry;
static int G__RDKDict_512_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Entry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Entry*) (soff+(sizeof(Entry)*i)))->~G__TEntry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Entry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Entry*) (soff))->~G__TEntry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_512_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Entry* dest = (Entry*) G__getstructoffset();
   *dest = *(Entry*) libp->para[0].ref;
   const Entry& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BoardEvent */
static int G__RDKDict_513_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BoardEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BoardEvent[n];
     } else {
       p = new((void*) gvp) BoardEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BoardEvent;
     } else {
       p = new((void*) gvp) BoardEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_BoardEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_513_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BoardEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new BoardEvent(
(Char_t) G__int(libp->para[0]), *(Entry*) libp->para[1].ref
, *(Recon*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) BoardEvent(
(Char_t) G__int(libp->para[0]), *(Entry*) libp->para[1].ref
, *(Recon*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_BoardEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_513_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BoardEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BoardEvent(*(BoardEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_BoardEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BoardEvent G__TBoardEvent;
static int G__RDKDict_513_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BoardEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BoardEvent*) (soff+(sizeof(BoardEvent)*i)))->~G__TBoardEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BoardEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BoardEvent*) (soff))->~G__TBoardEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_513_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BoardEvent* dest = (BoardEvent*) G__getstructoffset();
   *dest = *(BoardEvent*) libp->para[0].ref;
   const BoardEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* epEvent */
static int G__RDKDict_514_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   epEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new epEvent[n];
     } else {
       p = new((void*) gvp) epEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new epEvent;
     } else {
       p = new((void*) gvp) epEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_epEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_514_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   epEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new epEvent(*(epEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) epEvent(*(epEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_epEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_514_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   epEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new epEvent(
(Char_t) G__int(libp->para[0]), *(Entry*) libp->para[1].ref
, *(Recon*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) epEvent(
(Char_t) G__int(libp->para[0]), *(Entry*) libp->para[1].ref
, *(Recon*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_epEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_514_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   epEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new epEvent(
*(BoardEvent*) libp->para[0].ref, *(BoardEvent*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) epEvent(
*(BoardEvent*) libp->para[0].ref, *(BoardEvent*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new epEvent(*(BoardEvent*) libp->para[0].ref, *(BoardEvent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) epEvent(*(BoardEvent*) libp->para[0].ref, *(BoardEvent*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_epEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_514_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const epEvent& obj = ((epEvent*) G__getstructoffset())->operator=(*(epEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_514_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const epEvent*) G__getstructoffset())->operator==(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_514_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const epEvent*) G__getstructoffset())->operator!=(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_514_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const epEvent*) G__getstructoffset())->operator<(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef epEvent G__TepEvent;
static int G__RDKDict_514_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (epEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((epEvent*) (soff+(sizeof(epEvent)*i)))->~G__TepEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (epEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((epEvent*) (soff))->~G__TepEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NData */
static int G__RDKDict_515_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   NData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NData[n];
     } else {
       p = new((void*) gvp) NData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NData;
     } else {
       p = new((void*) gvp) NData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_NData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_515_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const NData& obj = ((NData*) G__getstructoffset())->operator=(*(NData*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_515_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const NData& obj = ((NData*) G__getstructoffset())->operator=((const Int_t*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_515_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const NData& obj = ((NData*) G__getstructoffset())->operator+=(*(NData*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_515_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   NData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new NData(*(NData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_NData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef NData G__TNData;
static int G__RDKDict_515_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (NData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((NData*) (soff+(sizeof(NData)*i)))->~G__TNData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (NData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((NData*) (soff))->~G__TNData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Task */
static int G__RDKDict_516_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Task* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Task(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Char_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) Task(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Char_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Task(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Char_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) Task(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Char_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Task(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Task(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Task((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Task((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Task((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Task((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Task[n];
       } else {
         p = new((void*) gvp) Task[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Task;
       } else {
         p = new((void*) gvp) Task;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Task));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_516_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Task* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Task(*(Task*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Task));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Task G__TTask;
static int G__RDKDict_516_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Task*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Task*) (soff+(sizeof(Task)*i)))->~G__TTask();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Task*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Task*) (soff))->~G__TTask();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Smoother */
static int G__RDKDict_581_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Smoother* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Smoother(
(UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Smoother(
(UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Smoother((UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) Smoother((UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Smoother((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Smoother((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Smoother[n];
       } else {
         p = new((void*) gvp) Smoother[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Smoother;
       } else {
         p = new((void*) gvp) Smoother;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Smoother));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_581_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Smoother*) G__getstructoffset())->init((UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_581_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD* pobj;
         const TVectorD xobj = ((const Smoother*) G__getstructoffset())->smooth(*(TVectorD*) libp->para[0].ref);
         pobj = new TVectorD(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_581_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Smoother*) G__getstructoffset())->smooth(*(TVectorD*) libp->para[0].ref, *(TVectorD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_581_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Smoother*) G__getstructoffset())->smooth(*(TMatrixTRow<Double_t>*) libp->para[0].ref, *(TMatrixTRow<Double_t>*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_581_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Smoother*) G__getstructoffset())->sigma_v());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_581_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Smoother*) G__getstructoffset())->sigma_h());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_581_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Smoother* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Smoother(*(Smoother*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Smoother));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Smoother G__TSmoother;
static int G__RDKDict_581_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Smoother*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Smoother*) (soff+(sizeof(Smoother)*i)))->~G__TSmoother();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Smoother*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Smoother*) (soff))->~G__TSmoother();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_581_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Smoother* dest = (Smoother*) G__getstructoffset();
   *dest = *(Smoother*) libp->para[0].ref;
   const Smoother& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analyzer */
static int G__RDKDict_582_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analyzer(
(Smoother*) G__int(libp->para[0]), (Smoother*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Analyzer(
(Smoother*) G__int(libp->para[0]), (Smoother*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analyzer((Smoother*) G__int(libp->para[0]), (Smoother*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Analyzer((Smoother*) G__int(libp->para[0]), (Smoother*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Analyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_582_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((Analyzer*) G__getstructoffset())->preanalyze(*(RawData*) libp->para[0].ref, *(Recon*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((Analyzer*) G__getstructoffset())->preanalyze(*(RawData*) libp->para[0].ref, *(Recon*) libp->para[1].ref
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_582_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((Analyzer*) G__getstructoffset())->analyze(*(RawData*) libp->para[0].ref, *(Recon*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((Analyzer*) G__getstructoffset())->analyze(*(RawData*) libp->para[0].ref, *(Recon*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_582_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((Analyzer*) G__getstructoffset())->nullevent(*(Recon*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((Analyzer*) G__getstructoffset())->nullevent(*(Recon*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_582_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analyzer*) G__getstructoffset())->setConfig((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_582_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Analyzer*) G__getstructoffset())->getConfig());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_582_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Analyzer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Analyzer(*(Analyzer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Analyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analyzer G__TAnalyzer;
static int G__RDKDict_582_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analyzer*) (soff+(sizeof(Analyzer)*i)))->~G__TAnalyzer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analyzer*) (soff))->~G__TAnalyzer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_582_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analyzer* dest = (Analyzer*) G__getstructoffset();
   *dest = *(Analyzer*) libp->para[0].ref;
   const Analyzer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BufferedReader */
static int G__RDKDict_585_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BufferedReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BufferedReader((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) BufferedReader((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BufferedReader((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) BufferedReader((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new BufferedReader[n];
       } else {
         p = new((void*) gvp) BufferedReader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new BufferedReader;
       } else {
         p = new((void*) gvp) BufferedReader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_BufferedReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BufferedReader*) G__getstructoffset())->open((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BufferedReader*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const BufferedReader*) G__getstructoffset())->is_open());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const BufferedReader*) G__getstructoffset())->good());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const BufferedReader*) G__getstructoffset())->eof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const BufferedReader*) G__getstructoffset())->eob());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((BufferedReader*) G__getstructoffset())->tellg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = ((BufferedReader*) G__getstructoffset())->seekg((Long64_t) G__Longlong(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = ((BufferedReader*) G__getstructoffset())->seekg((Long64_t) G__Longlong(libp->para[0]), (ios_base::seekdir) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BufferedReader*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BufferedReader*) G__getstructoffset())->read();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BufferedReader*) G__getstructoffset())->read((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const BufferedReader*) G__getstructoffset())->peak());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const BufferedReader*) G__getstructoffset())->getEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const BufferedReader*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const BufferedReader*) G__getstructoffset())->getPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BufferedReader*) G__getstructoffset())->setPosition((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((BufferedReader*) G__getstructoffset())->getChar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((BufferedReader*) G__getstructoffset())->getShort());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((BufferedReader*) G__getstructoffset())->getInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((BufferedReader*) G__getstructoffset())->getFloat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((BufferedReader*) G__getstructoffset())->getDouble());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((BufferedReader*) G__getstructoffset())->getString((Char_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((BufferedReader*) G__getstructoffset())->getString((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((BufferedReader*) G__getstructoffset())->getLine();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((BufferedReader*) G__getstructoffset())->copyChar((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((BufferedReader*) G__getstructoffset())->copyShort((Short_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((BufferedReader*) G__getstructoffset())->copyInt((Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((BufferedReader*) G__getstructoffset())->copyFloat((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((BufferedReader*) G__getstructoffset())->copyDouble((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_585_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BufferedReader*) G__getstructoffset())->resize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BufferedReader G__TBufferedReader;
static int G__RDKDict_585_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BufferedReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BufferedReader*) (soff+(sizeof(BufferedReader)*i)))->~G__TBufferedReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BufferedReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BufferedReader*) (soff))->~G__TBufferedReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RawTreeReader */
static int G__RDKDict_589_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawTreeReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawTreeReader((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) RawTreeReader((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RawTreeReader[n];
       } else {
         p = new((void*) gvp) RawTreeReader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RawTreeReader;
       } else {
         p = new((void*) gvp) RawTreeReader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawTreeReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawTreeReader(
(TreeFilter*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) RawTreeReader(
(TreeFilter*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawTreeReader((TreeFilter*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) RawTreeReader((TreeFilter*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawTreeReader((TreeFilter*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) RawTreeReader((TreeFilter*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawTreeReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawTreeReader(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) RawTreeReader(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawTreeReader(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) RawTreeReader(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawTreeReader(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) RawTreeReader(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((RawTreeReader*) G__getstructoffset())->reset((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((RawTreeReader*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         NData* pobj;
         NData xobj = ((RawTreeReader*) G__getstructoffset())->openFile((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
         pobj = new NData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         NData* pobj;
         NData xobj = ((RawTreeReader*) G__getstructoffset())->openSeries((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
         pobj = new NData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         NData* pobj;
         NData xobj = ((RawTreeReader*) G__getstructoffset())->openSeries((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
         pobj = new NData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         NData* pobj;
         NData xobj = ((RawTreeReader*) G__getstructoffset())->openList((const Char_t*) G__int(libp->para[0]));
         pobj = new NData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<Task>* pobj;
         vector<Task> xobj = RawTreeReader::getList((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
         pobj = new vector<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<Task>* pobj;
         vector<Task> xobj = RawTreeReader::getList((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
         pobj = new vector<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<Task>* pobj;
         vector<Task> xobj = RawTreeReader::getRawList((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
         pobj = new vector<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<Task>* pobj;
         vector<Task> xobj = RawTreeReader::getRawList((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
         pobj = new vector<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_589_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Int_t>* pobj;
         vector<Int_t> xobj = RawTreeReader::getSeries((const Char_t*) G__int(libp->para[0]));
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RawTreeReader G__TRawTreeReader;
static int G__RDKDict_589_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RawTreeReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RawTreeReader*) (soff+(sizeof(RawTreeReader)*i)))->~G__TRawTreeReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RawTreeReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RawTreeReader*) (soff))->~G__TRawTreeReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CalibrationData */
static int G__RDKDict_590_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CalibrationData[n];
     } else {
       p = new((void*) gvp) CalibrationData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CalibrationData;
     } else {
       p = new((void*) gvp) CalibrationData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CalibrationData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CalibrationData((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CalibrationData((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CalibrationData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CalibrationData(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Long64_t) G__Longlong(libp->para[3]));
   } else {
     p = new((void*) gvp) CalibrationData(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Long64_t) G__Longlong(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CalibrationData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CalibrationData(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Long64_t) G__Longlong(libp->para[3])
, (const Float_t**) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) CalibrationData(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Long64_t) G__Longlong(libp->para[3])
, (const Float_t**) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CalibrationData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const CalibrationData*) G__getstructoffset())->getFile();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CalibrationData*) G__getstructoffset())->getRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CalibrationData*) G__getstructoffset())->getSeries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const CalibrationData*) G__getstructoffset())->getStartDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CalibrationData*) G__getstructoffset())->getPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CalibrationData*) G__getstructoffset())->getSigma((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CalibrationData*) G__getstructoffset())->getChiDof((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const CalibrationData*) G__getstructoffset())->getSum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const CalibrationData*) G__getstructoffset())->toString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CalibrationData*) G__getstructoffset())->calibrate(*(Recon*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CalibrationData*) G__getstructoffset())->operator>(*(pair<Int_t,Int_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CalibrationData*) G__getstructoffset())->operator>=(*(pair<Int_t,Int_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CalibrationData*) G__getstructoffset())->operator==(*(pair<Int_t,Int_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CalibrationData*) G__getstructoffset())->operator<=(*(pair<Int_t,Int_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CalibrationData*) G__getstructoffset())->operator<(*(pair<Int_t,Int_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CalibrationData::calibrate((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Long64_t) G__Longlong(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CalibrationData::initCalibration();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CalibrationData::fill((RawTreeReader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CalibrationData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CalibrationData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CalibrationData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalibrationData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_590_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalibrationData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_590_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CalibrationData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CalibrationData(*(CalibrationData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CalibrationData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CalibrationData G__TCalibrationData;
static int G__RDKDict_590_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CalibrationData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CalibrationData*) (soff+(sizeof(CalibrationData)*i)))->~G__TCalibrationData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CalibrationData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CalibrationData*) (soff))->~G__TCalibrationData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_590_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationData* dest = (CalibrationData*) G__getstructoffset();
   *dest = *(CalibrationData*) libp->para[0].ref;
   const CalibrationData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CalibrationList */
static int G__RDKDict_602_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CalibrationList[n];
     } else {
       p = new((void*) gvp) CalibrationList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CalibrationList;
     } else {
       p = new((void*) gvp) CalibrationList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CalibrationList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalibrationList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CalibrationList(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) CalibrationList(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CalibrationList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((CalibrationList*) G__getstructoffset())->getCal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((CalibrationList*) G__getstructoffset())->getCal(*(Entry*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((CalibrationList*) G__getstructoffset())->getCal(*(pair<Int_t,Int_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Recon* pobj;
         Recon xobj = ((CalibrationList*) G__getstructoffset())->calibrate(*(Entry*) libp->para[0].ref, *(Recon*) libp->para[1].ref);
         pobj = new Recon(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CalibrationList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CalibrationList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CalibrationList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalibrationList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalibrationList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalibrationList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_602_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalibrationList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CalibrationList G__TCalibrationList;
static int G__RDKDict_602_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CalibrationList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CalibrationList*) (soff+(sizeof(CalibrationList)*i)))->~G__TCalibrationList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CalibrationList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CalibrationList*) (soff))->~G__TCalibrationList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DataReader */
static int G__RDKDict_604_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DataReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DataReader[n];
     } else {
       p = new((void*) gvp) DataReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DataReader;
     } else {
       p = new((void*) gvp) DataReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_DataReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DataReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new DataReader((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) DataReader((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_DataReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataReader*) G__getstructoffset())->open((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataReader*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DataReader*) G__getstructoffset())->is_open());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DataReader*) G__getstructoffset())->good());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DataReader*) G__getstructoffset())->eof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((DataReader*) G__getstructoffset())->tellg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = ((DataReader*) G__getstructoffset())->seekg((Long64_t) G__Longlong(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = ((DataReader*) G__getstructoffset())->seekg((Long64_t) G__Longlong(libp->para[0]), (ios_base::seekdir) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DataReader*) G__getstructoffset())->peek());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((DataReader*) G__getstructoffset())->readChar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((DataReader*) G__getstructoffset())->readShort());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DataReader*) G__getstructoffset())->readInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((DataReader*) G__getstructoffset())->readLong());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DataReader*) G__getstructoffset())->readDouble());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((DataReader*) G__getstructoffset())->readString((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         TString* pobj;
         TString xobj = ((DataReader*) G__getstructoffset())->readLine((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         TString* pobj;
         TString xobj = ((DataReader*) G__getstructoffset())->readLine();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataReader*) G__getstructoffset())->readData((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataReader*) G__getstructoffset())->readData((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataReader*) G__getstructoffset())->readData((Int_t) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataReader*) G__getstructoffset())->readData((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_604_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DataReader*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DataReader G__TDataReader;
static int G__RDKDict_604_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DataReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DataReader*) (soff+(sizeof(DataReader)*i)))->~G__TDataReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DataReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DataReader*) (soff))->~G__TDataReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EpgFitFunction */
static int G__RDKDict_608_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EpgFitFunction* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EpgFitFunction((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EpgFitFunction((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_608_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EpgFitFunction*) G__getstructoffset())->setPoint((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_608_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EpgFitFunction*) G__getstructoffset())->setMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_608_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EpgFitFunction* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EpgFitFunction(*(EpgFitFunction*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EpgFitFunction G__TEpgFitFunction;
static int G__RDKDict_608_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EpgFitFunction*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EpgFitFunction*) (soff+(sizeof(EpgFitFunction)*i)))->~G__TEpgFitFunction();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EpgFitFunction*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EpgFitFunction*) (soff))->~G__TEpgFitFunction();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Header */
static int G__RDKDict_615_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Header* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Header[n];
     } else {
       p = new((void*) gvp) Header[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Header;
     } else {
       p = new((void*) gvp) Header;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Header));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Header* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Header((TMap*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) Header((TMap*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Header));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Header*) G__getstructoffset())->getHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Header*) G__getstructoffset())->getSection(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Header*) G__getstructoffset())->getValue(*((TString*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Header*) G__getstructoffset())->addSection(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Header*) G__getstructoffset())->setValue(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Header*) G__getstructoffset())->appendValue(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TString>* pobj;
         const vector<TString> xobj = ((const Header*) G__getstructoffset())->getListOfSections();
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TString>* pobj;
         const vector<TString> xobj = ((const Header*) G__getstructoffset())->getListOfKeys(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_615_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Header*) G__getstructoffset())->printTree();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_615_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Header* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Header(*(Header*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Header));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Header G__THeader;
static int G__RDKDict_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Header*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Header*) (soff+(sizeof(Header)*i)))->~G__THeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Header*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Header*) (soff))->~G__THeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_615_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Header* dest = (Header*) G__getstructoffset();
   *dest = *(Header*) libp->para[0].ref;
   const Header& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NdatReader */
static int G__RDKDict_625_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   NdatReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new NdatReader(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) NdatReader(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_NdatReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_625_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((NdatReader*) G__getstructoffset())->readNext(*(NData*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_625_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   NdatReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new NdatReader(*(NdatReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_NdatReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef NdatReader G__TNdatReader;
static int G__RDKDict_625_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (NdatReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((NdatReader*) (soff+(sizeof(NdatReader)*i)))->~G__TNdatReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (NdatReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((NdatReader*) (soff))->~G__TNdatReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NdatWriter */
static int G__RDKDict_628_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   NdatWriter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NdatWriter(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (TFile*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) NdatWriter(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (TFile*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NdatWriter(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) NdatWriter(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_NdatWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_628_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((NdatWriter*) G__getstructoffset())->write();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_628_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   NdatWriter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new NdatWriter(*(NdatWriter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_NdatWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef NdatWriter G__TNdatWriter;
static int G__RDKDict_628_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (NdatWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((NdatWriter*) (soff+(sizeof(NdatWriter)*i)))->~G__TNdatWriter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (NdatWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((NdatWriter*) (soff))->~G__TNdatWriter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Plotter */
static int G__RDKDict_682_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter*) G__getstructoffset())->fill((RawTreeReader*) G__int(libp->para[0]), (CalibrationList*) G__int(libp->para[1])
, (CalibrationList*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter*) G__getstructoffset())->draw((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter*) G__getstructoffset())->save((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter*) G__getstructoffset())->open((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Plotter*) G__getstructoffset())->getOnPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Plotter*) G__getstructoffset())->getOffPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Plotter*) G__getstructoffset())->getPrePeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Plotter*) G__getstructoffset())->getPostPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Plotter*) G__getstructoffset())->getBgc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Plotter*) G__getstructoffset())->getDelta_t((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const Plotter*) G__getstructoffset())->getEp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Plotter::epEvent(*(Recon*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Plotter::gEvent(*(Recon*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Plotter::isPrePeak(*(Recon*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Plotter::isPostPeak(*(Recon*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Plotter::isOnPeak(*(Recon*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Plotter::isOffPeak(*(Recon*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_682_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Plotter::getPlotter());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_682_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Plotter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Plotter(*(Plotter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Plotter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_682_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Plotter* dest = (Plotter*) G__getstructoffset();
   *dest = *(Plotter*) libp->para[0].ref;
   const Plotter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Quantity */
static int G__RDKDict_683_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Quantity* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Quantity((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) Quantity((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Quantity[n];
       } else {
         p = new((void*) gvp) Quantity[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Quantity;
       } else {
         p = new((void*) gvp) Quantity;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Quantity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Quantity* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Quantity((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) Quantity((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Quantity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Quantity*) G__getstructoffset())->getValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Quantity*) G__getstructoffset())->getUncertainty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->inverse();
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->negate();
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Quantity*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator-();
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator+(*(Quantity*) libp->para[0].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator-(*(Quantity*) libp->para[0].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator*(*(Quantity*) libp->para[0].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator/(*(Quantity*) libp->para[0].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator+((Double_t) G__double(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator-((Double_t) G__double(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator*((Double_t) G__double(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity* pobj;
         const Quantity xobj = ((const Quantity*) G__getstructoffset())->operator/((Double_t) G__double(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator+=(*(Quantity*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator-=(*(Quantity*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator*=(*(Quantity*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator/=(*(Quantity*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator+=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator-=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator*=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_683_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Quantity& obj = ((Quantity*) G__getstructoffset())->operator/=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_683_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Quantity* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Quantity(*(Quantity*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Quantity));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Quantity G__TQuantity;
static int G__RDKDict_683_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Quantity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Quantity*) (soff+(sizeof(Quantity)*i)))->~G__TQuantity();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Quantity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Quantity*) (soff))->~G__TQuantity();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_683_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Quantity* dest = (Quantity*) G__getstructoffset();
   *dest = *(Quantity*) libp->para[0].ref;
   const Quantity& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Plotter2 */
static int G__RDKDict_719_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Plotter2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Plotter2[n];
     } else {
       p = new((void*) gvp) Plotter2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Plotter2;
     } else {
       p = new((void*) gvp) Plotter2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_Plotter2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter2*) G__getstructoffset())->fill((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter2*) G__getstructoffset())->save((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter2*) G__getstructoffset())->open((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((Plotter2*) G__getstructoffset())->draw((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((Plotter2*) G__getstructoffset())->draw((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Plotter2*) G__getstructoffset())->print((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBgoOnPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBgoOffPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBgoFinal((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBgoDeltaT((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd3OnPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd3OffPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd3Final((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd3DeltaT((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd4OnPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd4OffPeak((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd4Final((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getBapd4DeltaT((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getSbdEe());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getSbdEp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getSbdTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getSbdEq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getSbdQTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getSbdChi2vE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Plotter2*) G__getstructoffset())->getSbdChi2OfE((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = ((Plotter2*) G__getstructoffset())->getEpBgo((Int_t) G__int(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = ((Plotter2*) G__getstructoffset())->getEpBapd3((Int_t) G__int(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = ((Plotter2*) G__getstructoffset())->getEpBapd4((Int_t) G__int(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = ((Plotter2*) G__getstructoffset())->getEpgEpBgo((Int_t) G__int(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = ((Plotter2*) G__getstructoffset())->getEpgEpBapd3((Int_t) G__int(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = ((Plotter2*) G__getstructoffset())->getEpgEpBapd4((Int_t) G__int(libp->para[0]));
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Plotter2*) G__getstructoffset())->getSet(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Plotter2*) G__getstructoffset())->getSetBound((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_719_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Plotter2*) G__getstructoffset())->getSetBound(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Plotter2 G__TPlotter2;
static int G__RDKDict_719_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Plotter2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Plotter2*) (soff+(sizeof(Plotter2)*i)))->~G__TPlotter2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Plotter2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Plotter2*) (soff))->~G__TPlotter2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RawFileReader */
static int G__RDKDict_729_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawFileReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawFileReader[n];
     } else {
       p = new((void*) gvp) RawFileReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RawFileReader;
     } else {
       p = new((void*) gvp) RawFileReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawFileReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawFileReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RawFileReader(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) RawFileReader(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawFileReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawFileReader*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawFileReader*) G__getstructoffset())->open((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RawFileReader*) G__getstructoffset())->initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RawFileReader*) G__getstructoffset())->readNext(*(Entry*) libp->para[0].ref, *(RawData*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RawFileReader*) G__getstructoffset())->seek((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const RawFileReader*) G__getstructoffset())->tell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const RawFileReader*) G__getstructoffset())->getSize((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_729_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RawFileReader*) G__getstructoffset())->getHeaders());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_729_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RawFileReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RawFileReader(*(RawFileReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_RawFileReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RawFileReader G__TRawFileReader;
static int G__RDKDict_729_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RawFileReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RawFileReader*) (soff+(sizeof(RawFileReader)*i)))->~G__TRawFileReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RawFileReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RawFileReader*) (soff))->~G__TRawFileReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_729_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RawFileReader* dest = (RawFileReader*) G__getstructoffset();
   *dest = *(RawFileReader*) libp->para[0].ref;
   const RawFileReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreeFilter */
static int G__RDKDict_731_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeFilter(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) TreeFilter(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeFilter((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TreeFilter((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeFilter((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) TreeFilter((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TreeFilter[n];
       } else {
         p = new((void*) gvp) TreeFilter[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TreeFilter;
       } else {
         p = new((void*) gvp) TreeFilter;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_TreeFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_731_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const TreeFilter*) G__getstructoffset())->valid(*(NData*) libp->para[0].ref, *(ostream*) libp->para[1].ref));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const TreeFilter*) G__getstructoffset())->valid(*(NData*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_731_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreeFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreeFilter(*(TreeFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_TreeFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreeFilter G__TTreeFilter;
static int G__RDKDict_731_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreeFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreeFilter*) (soff+(sizeof(TreeFilter)*i)))->~G__TTreeFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreeFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreeFilter*) (soff))->~G__TTreeFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_731_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeFilter* dest = (TreeFilter*) G__getstructoffset();
   *dest = *(TreeFilter*) libp->para[0].ref;
   const TreeFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Task,allocator<Task> > */
static int G__RDKDict_733_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Task,allocator<Task> >::reference obj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->at((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Task,allocator<Task> >::const_reference obj = ((const vector<Task,allocator<Task> >*) G__getstructoffset())->at((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Task,allocator<Task> >::iterator* pobj;
         vector<Task,allocator<Task> >::iterator xobj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->begin();
         pobj = new vector<Task,allocator<Task> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Task,allocator<Task> >::iterator* pobj;
         vector<Task,allocator<Task> >::iterator xobj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->end();
         pobj = new vector<Task,allocator<Task> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Task,allocator<Task> >::reverse_iterator* pobj;
         vector<Task,allocator<Task> >::reverse_iterator xobj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->rbegin();
         pobj = new vector<Task,allocator<Task> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Task,allocator<Task> >::reverse_iterator* pobj;
         vector<Task,allocator<Task> >::reverse_iterator xobj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->rend();
         pobj = new vector<Task,allocator<Task> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<Task,allocator<Task> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<Task,allocator<Task> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->resize((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->resize((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]), *((Task*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<Task,allocator<Task> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<Task,allocator<Task> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Task,allocator<Task> >::reference obj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->operator[]((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Task,allocator<Task> >::const_reference obj = ((const vector<Task,allocator<Task> >*) G__getstructoffset())->operator[]((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Task,allocator<Task> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Task,allocator<Task> >[n];
     } else {
       p = new((void*) gvp) vector<Task,allocator<Task> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Task,allocator<Task> >;
     } else {
       p = new((void*) gvp) vector<Task,allocator<Task> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Task,allocator<Task> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Task,allocator<Task> >((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]), *(Task*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<Task,allocator<Task> >((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]), *(Task*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Task,allocator<Task> >((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<Task,allocator<Task> >((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Task,allocator<Task> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Task,allocator<Task> >(*(vector<Task,allocator<Task> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<Task,allocator<Task> >(*(vector<Task,allocator<Task> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Task,allocator<Task> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Task,allocator<Task> >(*((vector<Task,allocator<Task> >::const_iterator*) G__int(libp->para[0])), *((vector<Task,allocator<Task> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<Task,allocator<Task> >(*((vector<Task,allocator<Task> >::const_iterator*) G__int(libp->para[0])), *((vector<Task,allocator<Task> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Task,allocator<Task> >& obj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->operator=(*(vector<Task,allocator<Task> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->reserve((vector<Task,allocator<Task> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Task& obj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Task& obj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->push_back(*(Task*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->swap(*(vector<Task,allocator<Task> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Task,allocator<Task> >::iterator* pobj;
         vector<Task,allocator<Task> >::iterator xobj = ((vector<Task,allocator<Task> >*) G__getstructoffset())->insert(*((vector<Task,allocator<Task> >::iterator*) G__int(libp->para[0])), *(Task*) libp->para[1].ref);
         pobj = new vector<Task,allocator<Task> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->insert(*((vector<Task,allocator<Task> >::iterator*) G__int(libp->para[0])), *((vector<Task,allocator<Task> >::const_iterator*) G__int(libp->para[1]))
, *((vector<Task,allocator<Task> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->insert(*((vector<Task,allocator<Task> >::iterator*) G__int(libp->para[0])), (vector<Task,allocator<Task> >::size_type) G__int(libp->para[1])
, *(Task*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->erase(*((vector<Task,allocator<Task> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->erase(*((vector<Task,allocator<Task> >::iterator*) G__int(libp->para[0])), *((vector<Task,allocator<Task> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_733_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Task,allocator<Task> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Task,allocator<Task> > G__TvectorlETaskcOallocatorlETaskgRsPgR;
static int G__RDKDict_733_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Task,allocator<Task> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Task,allocator<Task> >*) (soff+(sizeof(vector<Task,allocator<Task> >)*i)))->~G__TvectorlETaskcOallocatorlETaskgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Task,allocator<Task> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Task,allocator<Task> >*) (soff))->~G__TvectorlETaskcOallocatorlETaskgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RDKReader */
static int G__RDKDict_741_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RDKReader*) G__getstructoffset())->open((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_741_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RDKReader*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_741_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RDKReader*) G__getstructoffset())->getHeaders());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_741_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RDKReader*) G__getstructoffset())->initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_741_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RDKReader*) G__getstructoffset())->readNext(*(Entry*) libp->para[0].ref, *(RawData*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RDKReader G__TRDKReader;
static int G__RDKDict_741_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RDKReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RDKReader*) (soff+(sizeof(RDKReader)*i)))->~G__TRDKReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RDKReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RDKReader*) (soff))->~G__TRDKReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_741_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RDKReader* dest = (RDKReader*) G__getstructoffset();
   *dest = *(RDKReader*) libp->para[0].ref;
   const RDKReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ThreadedAnalyzer */
static int G__RDKDict_771_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ThreadedAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ThreadedAnalyzer[n];
     } else {
       p = new((void*) gvp) ThreadedAnalyzer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ThreadedAnalyzer;
     } else {
       p = new((void*) gvp) ThreadedAnalyzer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_771_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ThreadedAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ThreadedAnalyzer(*(Task*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ThreadedAnalyzer(*(Task*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_771_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((ThreadedAnalyzer*) G__getstructoffset())->analyze(*(RawData*) libp->para[0].ref, *(Recon*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((ThreadedAnalyzer*) G__getstructoffset())->analyze(*(RawData*) libp->para[0].ref, *(Recon*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_771_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((ThreadedAnalyzer*) G__getstructoffset())->open((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((ThreadedAnalyzer*) G__getstructoffset())->open((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_771_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ThreadedAnalyzer*) G__getstructoffset())->open(*(Task*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_771_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ThreadedAnalyzer*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_771_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ThreadedAnalyzer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ThreadedAnalyzer(*(ThreadedAnalyzer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ThreadedAnalyzer G__TThreadedAnalyzer;
static int G__RDKDict_771_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ThreadedAnalyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ThreadedAnalyzer*) (soff+(sizeof(ThreadedAnalyzer)*i)))->~G__TThreadedAnalyzer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ThreadedAnalyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ThreadedAnalyzer*) (soff))->~G__TThreadedAnalyzer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* queue<Task,deque<Task,allocator<Task> > > */
static int G__RDKDict_777_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   queue<Task,deque<Task,allocator<Task> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new queue<Task,deque<Task,allocator<Task> > >[n];
     } else {
       p = new((void*) gvp) queue<Task,deque<Task,allocator<Task> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new queue<Task,deque<Task,allocator<Task> > >;
     } else {
       p = new((void*) gvp) queue<Task,deque<Task,allocator<Task> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_777_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const queue<Task,deque<Task,allocator<Task> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_777_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const queue<Task,deque<Task,allocator<Task> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_777_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const queue<Task,deque<Task,allocator<Task> > >::value_type& obj = ((queue<Task,deque<Task,allocator<Task> > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_777_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const queue<Task,deque<Task,allocator<Task> > >::value_type& obj = ((queue<Task,deque<Task,allocator<Task> > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_777_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((queue<Task,deque<Task,allocator<Task> > >*) G__getstructoffset())->push(*(Task*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_777_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((queue<Task,deque<Task,allocator<Task> > >*) G__getstructoffset())->pop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_777_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   queue<Task,deque<Task,allocator<Task> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new queue<Task,deque<Task,allocator<Task> > >(*(queue<Task,deque<Task,allocator<Task> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef queue<Task,deque<Task,allocator<Task> > > G__TqueuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR;
static int G__RDKDict_777_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (queue<Task,deque<Task,allocator<Task> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((queue<Task,deque<Task,allocator<Task> > >*) (soff+(sizeof(queue<Task,deque<Task,allocator<Task> > >)*i)))->~G__TqueuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (queue<Task,deque<Task,allocator<Task> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((queue<Task,deque<Task,allocator<Task> > >*) (soff))->~G__TqueuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_777_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   queue<Task,deque<Task,allocator<Task> > >* dest = (queue<Task,deque<Task,allocator<Task> > >*) G__getstructoffset();
   *dest = *(queue<Task,deque<Task,allocator<Task> > >*) libp->para[0].ref;
   const queue<Task,deque<Task,allocator<Task> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SecondPass */
static int G__RDKDict_778_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SecondPass* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SecondPass(
(const Char_t*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) SecondPass(
(const Char_t*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_SecondPass));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_778_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SecondPass*) G__getstructoffset())->fill((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SecondPass*) G__getstructoffset())->fill();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_778_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SecondPass* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SecondPass(*(SecondPass*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_SecondPass));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SecondPass G__TSecondPass;
static int G__RDKDict_778_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SecondPass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SecondPass*) (soff+(sizeof(SecondPass)*i)))->~G__TSecondPass();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SecondPass*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SecondPass*) (soff))->~G__TSecondPass();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Runnable */
static int G__RDKDict_796_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Runnable*) G__getstructoffset())->run());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_796_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Runnable*) G__getstructoffset())->clean();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Runnable G__TRunnable;
static int G__RDKDict_796_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Runnable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Runnable*) (soff+(sizeof(Runnable)*i)))->~G__TRunnable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Runnable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Runnable*) (soff))->~G__TRunnable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_796_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Runnable* dest = (Runnable*) G__getstructoffset();
   *dest = *(Runnable*) libp->para[0].ref;
   const Runnable& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ThreadRunner */
static int G__RDKDict_798_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ThreadRunner* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ThreadRunner(*((TString*) G__int(libp->para[0])), (Runnable*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ThreadRunner(*((TString*) G__int(libp->para[0])), (Runnable*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ThreadRunner(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) ThreadRunner(*((TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ThreadRunner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_798_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ThreadRunner::exec((void*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_798_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ThreadRunner::clean((void*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_798_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((ThreadRunner*) G__getstructoffset())->run((Runnable*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((ThreadRunner*) G__getstructoffset())->run());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_798_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ThreadRunner*) G__getstructoffset())->getThread());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_798_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ThreadRunner*) G__getstructoffset())->getState());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_798_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ThreadRunner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ThreadRunner(*(ThreadRunner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ThreadRunner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ThreadRunner G__TThreadRunner;
static int G__RDKDict_798_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ThreadRunner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ThreadRunner*) (soff+(sizeof(ThreadRunner)*i)))->~G__TThreadRunner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ThreadRunner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ThreadRunner*) (soff))->~G__TThreadRunner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_798_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ThreadRunner* dest = (ThreadRunner*) G__getstructoffset();
   *dest = *(ThreadRunner*) libp->para[0].ref;
   const ThreadRunner& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ThreadQueue */
static int G__RDKDict_799_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ThreadQueue* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ThreadQueue(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) ThreadQueue(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ThreadQueue));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_799_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ThreadQueue::exec((void*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_799_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ThreadQueue::clean((void*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_799_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ThreadQueue*) G__getstructoffset())->add((Runnable*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_799_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ThreadQueue*) G__getstructoffset())->run());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_799_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ThreadQueue* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ThreadQueue(*(ThreadQueue*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ThreadQueue));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ThreadQueue G__TThreadQueue;
static int G__RDKDict_799_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ThreadQueue*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ThreadQueue*) (soff+(sizeof(ThreadQueue)*i)))->~G__TThreadQueue();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ThreadQueue*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ThreadQueue*) (soff))->~G__TThreadQueue();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_799_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ThreadQueue* dest = (ThreadQueue*) G__getstructoffset();
   *dest = *(ThreadQueue*) libp->para[0].ref;
   const ThreadQueue& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MultiThread */
static int G__RDKDict_805_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MultiThread* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MultiThread((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MultiThread((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_MultiThread));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_805_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MultiThread*) G__getstructoffset())->add((Runnable*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_805_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MultiThread*) G__getstructoffset())->run();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_805_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MultiThread* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MultiThread(*(MultiThread*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_MultiThread));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MultiThread G__TMultiThread;
static int G__RDKDict_805_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MultiThread*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MultiThread*) (soff+(sizeof(MultiThread)*i)))->~G__TMultiThread();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MultiThread*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MultiThread*) (soff))->~G__TMultiThread();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_805_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MultiThread* dest = (MultiThread*) G__getstructoffset();
   *dest = *(MultiThread*) libp->para[0].ref;
   const MultiThread& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EpFitter */
static int G__RDKDict_821_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EpFitter::getFitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_821_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TFitResultPtr* pobj;
         TFitResultPtr xobj = ((EpFitter*) G__getstructoffset())->fit((const Short_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
         pobj = new TFitResultPtr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_821_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EpFitter*) G__getstructoffset())->getFunc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_821_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EpFitter*) G__getstructoffset())->getGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_821_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EpFitter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EpFitter(*(EpFitter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_EpFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EpFitter G__TEpFitter;
static int G__RDKDict_821_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EpFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EpFitter*) (soff+(sizeof(EpFitter)*i)))->~G__TEpFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EpFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EpFitter*) (soff))->~G__TEpFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_821_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EpFitter* dest = (EpFitter*) G__getstructoffset();
   *dest = *(EpFitter*) libp->para[0].ref;
   const EpFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreeReader */
static int G__RDKDict_822_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeReader[n];
     } else {
       p = new((void*) gvp) TreeReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeReader;
     } else {
       p = new((void*) gvp) TreeReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_TreeReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_822_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeReader*) G__getstructoffset())->openSeries(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_822_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeReader*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_822_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreeReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreeReader(*(TreeReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_TreeReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreeReader G__TTreeReader;
static int G__RDKDict_822_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreeReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreeReader*) (soff+(sizeof(TreeReader)*i)))->~G__TTreeReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreeReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreeReader*) (soff))->~G__TTreeReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_822_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeReader* dest = (TreeReader*) G__getstructoffset();
   *dest = *(TreeReader*) libp->para[0].ref;
   const TreeReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ExeWrapper */
static int G__RDKDict_823_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ExeWrapper* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ExeWrapper(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) ExeWrapper(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ExeWrapper[n];
       } else {
         p = new((void*) gvp) ExeWrapper[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ExeWrapper;
       } else {
         p = new((void*) gvp) ExeWrapper;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_823_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ExeWrapper*) G__getstructoffset())->setExe(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_823_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ExeWrapper* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ExeWrapper(*(ExeWrapper*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ExeWrapper G__TExeWrapper;
static int G__RDKDict_823_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ExeWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ExeWrapper*) (soff+(sizeof(ExeWrapper)*i)))->~G__TExeWrapper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ExeWrapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ExeWrapper*) (soff))->~G__TExeWrapper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_823_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ExeWrapper* dest = (ExeWrapper*) G__getstructoffset();
   *dest = *(ExeWrapper*) libp->para[0].ref;
   const ExeWrapper& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventDrawer */
static int G__RDKDict_824_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventDrawer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventDrawer[n];
     } else {
       p = new((void*) gvp) EventDrawer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventDrawer;
     } else {
       p = new((void*) gvp) EventDrawer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_EventDrawer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_824_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventDrawer*) G__getstructoffset())->openSeries((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_824_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EventDrawer*) G__getstructoffset())->drawEvent((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EventDrawer*) G__getstructoffset())->drawEvent((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventDrawer*) G__getstructoffset())->drawEvent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_824_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventDrawer*) G__getstructoffset())->draw(*(epEvent*) libp->para[0].ref, *(RawData*) libp->para[1].ref
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_824_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EventDrawer*) G__getstructoffset())->getEpFunc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_824_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EventDrawer*) G__getstructoffset())->getGFunc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_824_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EventDrawer*) G__getstructoffset())->getGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_824_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventDrawer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventDrawer(*(EventDrawer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_EventDrawer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventDrawer G__TEventDrawer;
static int G__RDKDict_824_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventDrawer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventDrawer*) (soff+(sizeof(EventDrawer)*i)))->~G__TEventDrawer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventDrawer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventDrawer*) (soff))->~G__TEventDrawer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_824_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventDrawer* dest = (EventDrawer*) G__getstructoffset();
   *dest = *(EventDrawer*) libp->para[0].ref;
   const EventDrawer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GFitter */
static int G__RDKDict_825_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GFitter::getFitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_825_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TFitResultPtr* pobj;
         TFitResultPtr xobj = ((GFitter*) G__getstructoffset())->fit((const Short_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
         pobj = new TFitResultPtr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_825_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GFitter*) G__getstructoffset())->getFunc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_825_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GFitter*) G__getstructoffset())->getGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_825_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GFitter*) G__getstructoffset())->FixParamter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_825_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GFitter*) G__getstructoffset())->ReleaseParameter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_825_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GFitter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GFitter(*(GFitter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_GFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GFitter G__TGFitter;
static int G__RDKDict_825_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GFitter*) (soff+(sizeof(GFitter)*i)))->~G__TGFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GFitter*) (soff))->~G__TGFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_825_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GFitter* dest = (GFitter*) G__getstructoffset();
   *dest = *(GFitter*) libp->para[0].ref;
   const GFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EpFilter */
static int G__RDKDict_826_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EpFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EpFilter[n];
     } else {
       p = new((void*) gvp) EpFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EpFilter;
     } else {
       p = new((void*) gvp) EpFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_EpFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_826_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EpFilter*) G__getstructoffset())->isValid(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_826_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((EpFilter*) G__getstructoffset())->getStatus(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_826_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EpFilter*) G__getstructoffset())->getSet(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_826_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EpFilter*) G__getstructoffset())->getSetBound((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_826_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EpFilter*) G__getstructoffset())->getSetBound(*(epEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_826_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EpFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EpFilter(*(EpFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_EpFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EpFilter G__TEpFilter;
static int G__RDKDict_826_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EpFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EpFilter*) (soff+(sizeof(EpFilter)*i)))->~G__TEpFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EpFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EpFilter*) (soff))->~G__TEpFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_826_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EpFilter* dest = (EpFilter*) G__getstructoffset();
   *dest = *(EpFilter*) libp->para[0].ref;
   const EpFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* epComp */
static int G__RDKDict_925_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   epComp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new epComp[n];
     } else {
       p = new((void*) gvp) epComp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new epComp;
     } else {
       p = new((void*) gvp) epComp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_epComp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_925_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   epComp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new epComp(*(epComp*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) epComp(*(epComp*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_epComp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef epComp G__TepComp;
static int G__RDKDict_925_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (epComp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((epComp*) (soff+(sizeof(epComp)*i)))->~G__TepComp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (epComp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((epComp*) (soff))->~G__TepComp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_925_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   epComp* dest = (epComp*) G__getstructoffset();
   *dest = *(epComp*) libp->para[0].ref;
   const epComp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CompareData */
static int G__RDKDict_926_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CompareData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CompareData(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) CompareData(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CompareData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_926_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((CompareData*) G__getstructoffset())->compare((TTree*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      ((CompareData*) G__getstructoffset())->compare((TTree*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((CompareData*) G__getstructoffset())->compare((TTree*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict_926_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((CompareData*) G__getstructoffset())->getResult());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RDKDict_926_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CompareData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CompareData(*(CompareData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RDKDictLN_CompareData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CompareData G__TCompareData;
static int G__RDKDict_926_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CompareData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CompareData*) (soff+(sizeof(CompareData)*i)))->~G__TCompareData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CompareData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CompareData*) (soff))->~G__TCompareData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RDKDict_926_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CompareData* dest = (CompareData*) G__getstructoffset();
   *dest = *(CompareData*) libp->para[0].ref;
   const CompareData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__RDKDict__0_879(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(Task*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_894(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(CalibrationData*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_895(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(CalibrationList*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_925(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = operator+((Double_t) G__double(libp->para[0]), *(Quantity*) libp->para[1].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_926(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = operator-((Double_t) G__double(libp->para[0]), *(Quantity*) libp->para[1].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_927(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = operator*((Double_t) G__double(libp->para[0]), *(Quantity*) libp->para[1].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_928(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Quantity* pobj;
         Quantity xobj = operator/((Double_t) G__double(libp->para[0]), *(Quantity*) libp->para[1].ref);
         pobj = new Quantity(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) getConfig((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) setNThreads((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fitTest(*(RawData*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      testRun((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      logNdat(*(NData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1196(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      crunchDisk((AnalyzerMode) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      crunchDisk((AnalyzerMode) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1197(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      crunchSeries((AnalyzerMode) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      crunchSeries((AnalyzerMode) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1212(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         queue<Task>* pobj;
         queue<Task> xobj = buildQueue((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
         pobj = new queue<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         queue<Task>* pobj;
         queue<Task> xobj = buildQueue((Int_t) G__int(libp->para[0]));
         pobj = new queue<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         queue<Task>* pobj;
         queue<Task> xobj = buildQueue();
         pobj = new queue<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1213(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         queue<Task>* pobj;
         queue<Task> xobj = buildQueue((const Char_t*) G__int(libp->para[0]));
         pobj = new queue<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1214(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         queue<Task>* pobj;
         queue<Task> xobj = queueFromFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
         pobj = new queue<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         queue<Task>* pobj;
         queue<Task> xobj = queueFromFile((const Char_t*) G__int(libp->para[0]));
         pobj = new queue<Task>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1215(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      crunch();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1216(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      crunch(*((queue<Task>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      crunch(*((queue<Task>*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1217(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      crunch(*((queue<Task>*) G__int(libp->para[0])), (AnalyzerMode) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      crunch(*((queue<Task>*) G__int(libp->para[0])), (AnalyzerMode) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1218(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) fitFunction((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1219(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      cooperAnalysis(*(RawData*) libp->para[0].ref, (Int_t*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1220(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      cooperTest((RawFileReader*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1221(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      calibrate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1222(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      updateNdat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1223(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      exportTimestamps((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1224(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      crunchFromFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      crunchFromFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1225(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      second_pass(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      second_pass(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      second_pass();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1226(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      importConfig((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1227(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      createEpCal();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1228(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) graphMatt(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1229(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) egraphMatt(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1230(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) openAllTrees());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1231(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) openSet1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1232(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) openSet2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1233(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) openSet2a());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1234(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) openSet2b());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1235(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) openSet3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1236(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) openSet4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1237(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      exportTree((TTree*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1238(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      importJeffData(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RDKDict__0_1239(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      parseJeffLine(*((TString*) G__int(libp->para[0])), *(epEvent*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* RDKConfig */

/* RDKException */

/* RawData */

/* Recon */

/* Entry */

/* BoardEvent */

/* epEvent */

/* NData */

/* Task */

/* Smoother */

/* Analyzer */

/* BufferedReader */

/* RawTreeReader */

/* CalibrationData */

/* CalibrationList */

/* DataReader */

/* EpgFitFunction */

/* Header */

/* NdatReader */

/* NdatWriter */

/* Plotter */

/* Quantity */

/* Plotter2 */

/* RawFileReader */

/* TreeFilter */

/* vector<Task,allocator<Task> > */

/* RDKReader */

/* ThreadedAnalyzer */

/* queue<Task,deque<Task,allocator<Task> > > */

/* SecondPass */

/* Runnable */

/* ThreadRunner */

/* ThreadQueue */

/* MultiThread */

/* EpFitter */

/* TreeReader */

/* ExeWrapper */

/* EventDrawer */

/* GFitter */

/* EpFilter */

/* epComp */

/* CompareData */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRDKDict {
 public:
  G__Sizep2memfuncRDKDict(): p(&G__Sizep2memfuncRDKDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRDKDict::*p)();
};

size_t G__get_sizep2memfuncRDKDict()
{
  G__Sizep2memfuncRDKDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRDKDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RDKDictLN_RDKException))) {
     RDKException *G__Lderived;
     G__Lderived=(RDKException*)0x1000;
     {
       exception *G__Lpbase=(exception*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_RDKException),G__get_linked_tagnum(&G__RDKDictLN_exception),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RDKDictLN_CalibrationData))) {
     CalibrationData *G__Lderived;
     G__Lderived=(CalibrationData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationData),G__get_linked_tagnum(&G__RDKDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList))) {
     CalibrationList *G__Lderived;
     G__Lderived=(CalibrationList*)0x1000;
     {
       TSortedList *G__Lpbase=(TSortedList*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList),G__get_linked_tagnum(&G__RDKDictLN_TSortedList),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TList *G__Lpbase=(TList*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList),G__get_linked_tagnum(&G__RDKDictLN_TList),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList),G__get_linked_tagnum(&G__RDKDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList),G__get_linked_tagnum(&G__RDKDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList),G__get_linked_tagnum(&G__RDKDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction))) {
     EpgFitFunction *G__Lderived;
     G__Lderived=(EpgFitFunction*)0x1000;
     {
       ROOT::Minuit2::FCNBase *G__Lpbase=(ROOT::Minuit2::FCNBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction),G__get_linked_tagnum(&G__RDKDictLN_ROOTcLcLMinuit2cLcLFCNBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ROOT::Minuit2::GenericFunction *G__Lpbase=(ROOT::Minuit2::GenericFunction*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction),G__get_linked_tagnum(&G__RDKDictLN_ROOTcLcLMinuit2cLcLGenericFunction),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer))) {
     ThreadedAnalyzer *G__Lderived;
     G__Lderived=(ThreadedAnalyzer*)0x1000;
     {
       Runnable *G__Lpbase=(Runnable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer),G__get_linked_tagnum(&G__RDKDictLN_Runnable),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper))) {
     ExeWrapper *G__Lderived;
     G__Lderived=(ExeWrapper*)0x1000;
     {
       Runnable *G__Lpbase=(Runnable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper),G__get_linked_tagnum(&G__RDKDictLN_Runnable),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRDKDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,UInt_t>",117,G__get_linked_tagnum(&G__RDKDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int>",117,G__get_linked_tagnum(&G__RDKDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int,less<unsigned int> >",117,G__get_linked_tagnum(&G__RDKDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorD",117,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Int_t>",117,G__get_linked_tagnum(&G__RDKDictLN_pairlEintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TString,allocator<TString> >::iterator>::iterator_category,iterator_traits<vector<TString,allocator<TString> >::iterator>::value_type,iterator_traits<vector<TString,allocator<TString> >::iterator>::difference_type,iterator_traits<vector<TString,allocator<TString> >::iterator>::pointer,iterator_traits<vector<TString,allocator<TString> >::iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TString>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TString,long>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TString,long,TString*>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TString,allocator<TString> >::const_iterator>::iterator_category,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::value_type,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::difference_type,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::pointer,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<int,allocator<int> >::iterator>::iterator_category,iterator_traits<vector<int,allocator<int> >::iterator>::value_type,iterator_traits<vector<int,allocator<int> >::iterator>::difference_type,iterator_traits<vector<int,allocator<int> >::iterator>::pointer,iterator_traits<vector<int,allocator<int> >::iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,int>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,int,long>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,int,long,int*>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<int,allocator<int> >::const_iterator>::iterator_category,iterator_traits<vector<int,allocator<int> >::const_iterator>::value_type,iterator_traits<vector<int,allocator<int> >::const_iterator>::difference_type,iterator_traits<vector<int,allocator<int> >::const_iterator>::pointer,iterator_traits<vector<int,allocator<int> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Task>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__RDKDictLN_Task),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__RDKDictLN_Task),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__RDKDictLN_Task),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__RDKDictLN_Task),1,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__RDKDictLN_Task),1,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Task>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<Task,allocator<Task> >::iterator>::iterator_category,iterator_traits<vector<Task,allocator<Task> >::iterator>::value_type,iterator_traits<vector<Task,allocator<Task> >::iterator>::difference_type,iterator_traits<vector<Task,allocator<Task> >::iterator>::pointer,iterator_traits<vector<Task,allocator<Task> >::iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,Task>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,Task,long>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,Task,long,Task*>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<Task,allocator<Task> >::const_iterator>::iterator_category,iterator_traits<vector<Task,allocator<Task> >::const_iterator>::value_type,iterator_traits<vector<Task,allocator<Task> >::const_iterator>::difference_type,iterator_traits<vector<Task,allocator<Task> >::const_iterator>::pointer,iterator_traits<vector<Task,allocator<Task> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<Task>",117,G__get_linked_tagnum(&G__RDKDictLN_dequelETaskcOallocatorlETaskgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("queue<Task>",117,G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__RDKDictLN_Task),0,G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("container_type",117,G__get_linked_tagnum(&G__RDKDictLN_dequelETaskcOallocatorlETaskgRsPgR),0,G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<epEvent>",117,G__get_linked_tagnum(&G__RDKDictLN_dequelEepEventcOallocatorlEepEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<Entry>",117,G__get_linked_tagnum(&G__RDKDictLN_dequelEEntrycOallocatorlEEntrygRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<Recon>",117,G__get_linked_tagnum(&G__RDKDictLN_dequelEReconcOallocatorlERecongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<BoardEvent>",117,G__get_linked_tagnum(&G__RDKDictLN_dequelEBoardEventcOallocatorlEBoardEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<Runnable*>",117,G__get_linked_tagnum(&G__RDKDictLN_dequelERunnablemUcOallocatorlERunnablemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("queue<Runnable*>",117,G__get_linked_tagnum(&G__RDKDictLN_queuelERunnablemUcOdequelERunnablemUcOallocatorlERunnablemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SyncThread*>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SyncThread*>",117,G__get_linked_tagnum(&G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::iterator>::iterator_category,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::iterator>::value_type,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::iterator>::difference_type,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::iterator>::pointer,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,SyncThread*>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,SyncThread*,long>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,SyncThread*,long,SyncThread**>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::const_iterator>::iterator_category,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::const_iterator>::value_type,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::const_iterator>::difference_type,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::const_iterator>::pointer,iterator_traits<vector<SyncThread*,allocator<SyncThread*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__RDKDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__RDKDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__RDKDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__RDKDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* RDKConfig */
static void G__setup_memvarRDKConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_RDKConfig));
   { RDKConfig *p; p=(RDKConfig*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<UInt_t,UInt_t>"),-1,4,"config_map=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RDKException */
static void G__setup_memvarRDKException(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_RDKException));
   { RDKException *p; p=(RDKException*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"description[256]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RawData */
static void G__setup_memvarRawData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_RawData));
   { RawData *p; p=(RawData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ch)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"ch[16][2048]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Recon */
static void G__setup_memvarRecon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Recon));
   { Recon *p; p=(Recon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->t_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->R2_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"R2_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fitparam)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fitparam[14][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfit)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"nfit[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->noise)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"noise[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_rise)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_rise[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_half)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_half=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_dip)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_dip=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ep_offset)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ep_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ep_chi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ep_chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ep_edm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ep_edm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ep_errdef)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ep_errdef=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sat)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sat[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tail)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tail[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->peak_pos)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"peak_pos[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pre_E)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pre_E[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->disc)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"disc[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flat)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"flat[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->adj_E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"adj_E[14]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Recon::BRANCH),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"BRANCH=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Entry */
static void G__setup_memvarEntry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Entry));
   { Entry *p; p=(Entry*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"timestamp[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nevent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrun)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nseries)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)(&Entry::BRANCH),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"BRANCH=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* BoardEvent */
static void G__setup_memvarBoardEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_BoardEvent));
   { BoardEvent *p; p=(BoardEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nseries)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrun)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nevent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_half)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_half=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_dip)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_dip=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2_ep)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2_ep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_gamma[7]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_gamma[7]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->noise)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"noise[7]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_rise)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_rise[7]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2_gamma[7]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g_param)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"g_param[7][6]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* epEvent */
static void G__setup_memvarepEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_epEvent));
   { epEvent *p; p=(epEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->t_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_half)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_half=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_dip)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_dip=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2_ep)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2_ep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigma_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_rise)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"t_rise[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g_param)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"g_param[14][6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->M)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"M[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->grp)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"grp[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"timestamp[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nseries)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrun)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nevent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nevent0)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nevent1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)(&epEvent::BRANCH),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"BRANCH=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NData */
static void G__setup_memvarNData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_NData));
   { NData *p; p=(NData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->start)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"start=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn00)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn01)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn10)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn10=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn11)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn20)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn20=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn21)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn21=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn30)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn30=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn31)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn31=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nn)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ne)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"ne=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->np)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"np=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nep)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"nep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"t=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->series)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"series=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Task */
static void G__setup_memvarTask(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Task));
   { Task *p; p=(Task*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->path)-(long)(p)),67,0,1,-1,G__defined_typename("Char_t"),-1,1,"path=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->series)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"series=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->config)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"config=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Smoother */
static void G__setup_memvarSmoother(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Smoother));
   { Smoother *p; p=(Smoother*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"radius=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"order=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"power=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"vectors=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analyzer */
static void G__setup_memvarAnalyzer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Analyzer));
   { Analyzer *p; p=(Analyzer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"y1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"b=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"m=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"sigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"chi2max=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_Smoother),-1,-1,4,"eSmoother=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_Smoother),-1,-1,4,"tSmoother=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"status=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"config=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"mode[14]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Analyzer::GFIT),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"GFIT=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* BufferedReader */
static void G__setup_memvarBufferedReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_BufferedReader));
   { BufferedReader *p; p=(BufferedReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"buffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"position=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"end=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_boostcLcLifstream),-1,-1,4,"in=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RawTreeReader */
static void G__setup_memvarRawTreeReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader));
   { RawTreeReader *p; p=(RawTreeReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"log=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__RDKDictLN_TreeFilter),-1,-1,4,"filter=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,G__defined_typename("Char_t"),-1,4,"path=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"logPath=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TChain),-1,-1,1,"tree=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndat)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TChain),-1,-1,1,"ndat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->recon)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Recon),-1,-1,1,"recon=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->entry)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Entry),-1,-1,1,"entry=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rdata)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_RawData),-1,-1,1,"rdata=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndata)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_NData),-1,-1,1,"ndata=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("nSeries=%lldLL",(long long)RawTreeReader::nSeries).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&RawTreeReader::allSeries),105,0,1,-1,G__defined_typename("Int_t"),-2,1,"allSeries[35]=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("n1400=%lldLL",(long long)RawTreeReader::n1400).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&RawTreeReader::all1400),105,0,1,-1,G__defined_typename("Int_t"),-2,1,"all1400[45]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CalibrationData */
static void G__setup_memvarCalibrationData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationData));
   { CalibrationData *p; p=(CalibrationData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_string),-1,-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"run=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"series=",0,(char*)NULL);
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"start=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fit[14][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"config=",0,(char*)NULL);
   G__memvar_setup((void*)(&CalibrationData::hist),85,2,0,G__get_linked_tagnum(&G__RDKDictLN_TH1),-1,-2,1,"hist=",0,(char*)NULL);
   G__memvar_setup((void*)(&CalibrationData::bg_gaus),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TF1),-1,-2,1,"bg_gaus=",0,(char*)NULL);
   G__memvar_setup((void*)(&CalibrationData::res),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"res=",0,(char*)NULL);
   G__memvar_setup((void*)(&CalibrationData::mode),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TBits),-1,-2,1,"mode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CalibrationList */
static void G__setup_memvarCalibrationList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList));
   { CalibrationList *p; p=(CalibrationList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjLink),-1,-1,4,"current=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DataReader */
static void G__setup_memvarDataReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_DataReader));
   { DataReader *p; p=(DataReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_buffer_t),-1,-1,2,"buff=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_boostcLcLifstream),-1,-1,2,"in=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EpgFitFunction */
static void G__setup_memvarEpgFitFunction(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction));
   { EpgFitFunction *p; p=(EpgFitFunction*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"N=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mode=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("EPFIT=%lldLL",(long long)EpgFitFunction::EPFIT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("GFIT=%lldLL",(long long)EpgFitFunction::GFIT).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Header */
static void G__setup_memvarHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Header));
   { Header *p; p=(Header*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isOwner=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TMap),-1,-1,4,"map=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NdatReader */
static void G__setup_memvarNdatReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_NdatReader));
   { NdatReader *p; p=(NdatReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,1,-1,G__defined_typename("Char_t"),-1,4,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_DataReader),-1,-1,4,"reader=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NdatWriter */
static void G__setup_memvarNdatWriter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_NdatWriter));
   { NdatWriter *p; p=(NdatWriter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_NdatReader),-1,-1,4,"reader=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_NData),-1,-1,4,"ndata=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_NData),-1,-1,4,"total=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-1,4,"start=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,1,-1,G__defined_typename("Bool_t"),-1,4,"closeAtEnd=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,1,-1,G__defined_typename("Char_t"),-1,4,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TFile),-1,-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TTree),-1,-1,4,"ndat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TTree),-1,-1,4,"Ndat=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Plotter */
static void G__setup_memvarPlotter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Plotter));
   { Plotter *p; p=(Plotter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_TH1),-1,-1,4,"onPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_TH1),-1,-1,4,"offPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_TH1),-1,-1,4,"bgc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_TH1),-1,-1,4,"delta_t=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_TH1),-1,-1,4,"prePeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_TH1),-1,-1,4,"postPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TFile),-1,-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TCanvas),-1,-1,4,"canvas=",0,(char*)NULL);
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"ep=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"cal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader),-1,-1,4,"reader=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Recon),-1,-1,4,"rtemp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Entry),-1,-1,4,"etemp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_CalibrationData),-1,-1,4,"bgo_cal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_CalibrationData),-1,-1,4,"bapd_cal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_Plotter),-1,-2,4,"fPlotter=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter::binSize),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"binSize[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter::max),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"max[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter::min),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"min[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter::windows),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"windows[2][4]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Quantity */
static void G__setup_memvarQuantity(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Quantity));
   { Quantity *p; p=(Quantity*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"value=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"uncertainty=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Plotter2 */
static void G__setup_memvarPlotter2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Plotter2));
   { Plotter2 *p; p=(Plotter2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TFile),-1,-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bgoOnPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd3OnPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd4OnPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bgoOffPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd3OffPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd4OffPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bgoFinal=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd3Final=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd4Final=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bgoDeltaT=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd3DeltaT=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"bapd4DeltaT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TH1F),-1,-1,4,"sbd_E_e=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TH1F),-1,-1,4,"sbd_E_p=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TH1F),-1,-1,4,"sbd_tof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TH1F),-1,-1,4,"sbd_E_q=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TH1F),-1,-1,4,"sbd_q_tof=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TObjArray),-1,-1,4,"sbdChi2OfE=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TH2F),-1,-1,4,"sbdChi2vE=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Quantity),-1,-1,4,"ep_bgo[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Quantity),-1,-1,4,"ep_bapd3[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Quantity),-1,-1,4,"ep_bapd4[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Quantity),-1,-1,4,"epg_ep_bgo[13]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Quantity),-1,-1,4,"epg_ep_bapd3[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Quantity),-1,-1,4,"epg_ep_bapd4[5]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::binSize),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"binSize[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::max),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"max[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::min),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"min[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::windows),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"windows[2][4]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::emax),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"emax=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::emin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"emin=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::pmax),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"pmax=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::pmin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"pmin=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::ebin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"ebin=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::pbin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"pbin=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::tofmin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"tofmin=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::tofmax),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"tofmax=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::p0),100,0,0,-1,G__defined_typename("Double_t"),-2,1,"p0[5]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::p2),100,0,0,-1,G__defined_typename("Double_t"),-2,1,"p2[5]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::set1),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set1=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::set2a),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set2a=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::set2b),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set2b=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::set3),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set3=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::set4),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set4=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::EPSCALE),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"EPSCALE=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::MULTIPLICITY),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"MULTIPLICITY=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::COOPER),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"COOPER=",0,(char*)NULL);
   G__memvar_setup((void*)(&Plotter2::REV_COOPER),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"REV_COOPER=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RawFileReader */
static void G__setup_memvarRawFileReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_RawFileReader));
   { RawFileReader *p; p=(RawFileReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"current=",0,(char*)NULL);
   G__memvar_setup((void*)0,78,0,0,-1,G__defined_typename("Long64_t"),-1,4,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,78,0,0,-1,G__defined_typename("Long64_t"),-1,4,"foot_size=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isOpen=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_BufferedReader),-1,-1,4,"bboard=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_Header),-1,-1,4,"header=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,110,0,1,-1,G__defined_typename("Long64_t"),-2,1,G__FastAllocString(2048).Format("eventSize=%lldLL",(long long)RawFileReader::eventSize).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreeFilter */
static void G__setup_memvarTreeFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_TreeFilter));
   { TreeFilter *p; p=(TreeFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"HVT=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"spark=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"flux=",0,(char*)NULL);
   G__memvar_setup((void*)(&TreeFilter::all),85,0,1,G__get_linked_tagnum(&G__RDKDictLN_TreeFilter),-1,-2,1,"all=",0,(char*)NULL);
   G__memvar_setup((void*)(&TreeFilter::std),85,0,1,G__get_linked_tagnum(&G__RDKDictLN_TreeFilter),-1,-2,1,"std=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<Task,allocator<Task> > */
static void G__setup_memvarvectorlETaskcOallocatorlETaskgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   { vector<Task,allocator<Task> > *p; p=(vector<Task,allocator<Task> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* RDKReader */
static void G__setup_memvarRDKReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_RDKReader));
   { RDKReader *p; p=(RDKReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,78,0,0,-1,G__defined_typename("Long64_t"),-1,2,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isOpen=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_DataReader),-1,-1,2,"board=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_Header),-1,-1,2,"header=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ThreadedAnalyzer */
static void G__setup_memvarThreadedAnalyzer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer));
   { ThreadedAnalyzer *p; p=(ThreadedAnalyzer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__RDKDictLN_Analyzer),-1,-1,4,"analyzers=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"openned=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Smoother),-1,-1,4,"tSmoother=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Smoother),-1,-1,4,"eSmoother=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_RawFileReader),-1,-1,4,"reader=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Entry),-1,-1,4,"entry=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Recon),-1,-1,4,"recon=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_RawData),-1,-1,4,"rdata=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Task),-1,-1,4,"task=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TFile),-1,-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TTree),-1,-1,4,"tree=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_EpFitFunction),-1,-1,4,"epfunc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_EpFitter),-1,-1,4,"fitter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"param[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"INITIALIZED=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::DEBUG),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"DEBUG=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::EPFIT),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"EPFIT=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::original),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TGraph),-1,-2,1,"original=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::smooth1),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TGraph),-1,-2,1,"smooth1=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::smooth2),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TGraph),-1,-2,1,"smooth2=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::function),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TF1),-1,-2,1,"function=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::sigfunc),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TF1),-1,-2,1,"sigfunc=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::marker1),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TMarker),-1,-2,1,"marker1=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::marker2),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TMarker),-1,-2,1,"marker2=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::marker3),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TMarker),-1,-2,1,"marker3=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::text1),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TLatex),-1,-2,1,"text1=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::text2),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TLatex),-1,-2,1,"text2=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::text3),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TLatex),-1,-2,1,"text3=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::t_line),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TLine),-1,-2,1,"t_line=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::E_line),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TLine),-1,-2,1,"E_line=",0,(char*)NULL);
   G__memvar_setup((void*)(&ThreadedAnalyzer::drawFitFunc),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_EpFitFunction),-1,-2,1,"drawFitFunc=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* queue<Task,deque<Task,allocator<Task> > > */
static void G__setup_memvarqueuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR));
   { queue<Task,deque<Task,allocator<Task> > > *p; p=(queue<Task,deque<Task,allocator<Task> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelETaskcOallocatorlETaskgRsPgR),-1,-1,2,"c=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SecondPass */
static void G__setup_memvarSecondPass(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_SecondPass));
   { SecondPass *p; p=(SecondPass*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_SecondPasscLcLMultiplicityCompare),-1,-1,4,"compare=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"epCalPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"input=",0,(char*)NULL);
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"glitch=",0,(char*)NULL);
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"t1=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,G__defined_typename("Char_t"),-1,4,"runlist=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"series=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"start=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"config=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TFile),-1,-1,4,"output=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TTree),-1,-1,4,"outTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TChain),-1,-1,4,"inTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Entry),-1,-1,4,"entry=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_Recon),-1,-1,4,"recon=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_epEvent),-1,-1,4,"epevent=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEepEventcOallocatorlEepEventgRsPgR),G__defined_typename("deque<epEvent>"),-1,4,"events=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEEntrycOallocatorlEEntrygRsPgR),G__defined_typename("deque<Entry>"),-1,4,"entries=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEReconcOallocatorlERecongRsPgR),G__defined_typename("deque<Recon>"),-1,4,"recons=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEBoardEventcOallocatorlEBoardEventgRsPgR),G__defined_typename("deque<BoardEvent>"),-1,4,"b[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEBoardEventcOallocatorlEBoardEventgRsPgR),G__defined_typename("deque<BoardEvent>"),-1,4,"g[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEBoardEventcOallocatorlEBoardEventgRsPgR),G__defined_typename("deque<BoardEvent>"),-1,4,"temp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_CalibrationList),-1,-1,4,"bgoList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_CalibrationList),-1,-1,4,"bapdList=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,110,0,1,-1,G__defined_typename("Long64_t"),-2,1,G__FastAllocString(2048).Format("mask=%lldLL",(long long)SecondPass::mask).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("sigma_gamma=%lldLL",(long long)SecondPass::sigma_gamma).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&SecondPass::MULTI),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"MULTI=",0,(char*)NULL);
   G__memvar_setup((void*)(&SecondPass::DEF_CAL),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"DEF_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)(&SecondPass::DEBUG),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"DEBUG=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Runnable */
static void G__setup_memvarRunnable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_Runnable));
   { Runnable *p; p=(Runnable*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ThreadRunner */
static void G__setup_memvarThreadRunner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_ThreadRunner));
   { ThreadRunner *p; p=(ThreadRunner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_Runnable),-1,-1,4,"app=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TThread),-1,-1,4,"thread=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ThreadQueue */
static void G__setup_memvarThreadQueue(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_ThreadQueue));
   { ThreadQueue *p; p=(ThreadQueue*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_queuelERunnablemUcOdequelERunnablemUcOallocatorlERunnablemUgRsPgRsPgR),G__defined_typename("queue<Runnable*>"),-1,4,"tasks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_queuelERunnablemUcOdequelERunnablemUcOallocatorlERunnablemUgRsPgRsPgR),G__defined_typename("queue<Runnable*>"),-1,4,"cleanup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TThread),-1,-1,4,"thread=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MultiThread */
static void G__setup_memvarMultiThread(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_MultiThread));
   { MultiThread *p; p=(MultiThread*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TMutex),-1,-1,4,"mutex=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_queuelERunnablemUcOdequelERunnablemUcOallocatorlERunnablemUgRsPgRsPgR),G__defined_typename("queue<Runnable*>"),-2,4,"tasks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR),G__defined_typename("vector<SyncThread*>"),-1,4,"threads=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EpFitter */
static void G__setup_memvarEpFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_EpFitter));
   { EpFitter *p; p=(EpFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TF1),-1,-2,4,"func=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TGraph),-1,-2,4,"graph=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_EpFitter),-1,-2,4,"fitter=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreeReader */
static void G__setup_memvarTreeReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_TreeReader));
   { TreeReader *p; p=(TreeReader*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TChain),-1,-1,1,"tree=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ep)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_epEvent),-1,-1,1,"ep=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ExeWrapper */
static void G__setup_memvarExeWrapper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper));
   { ExeWrapper *p; p=(ExeWrapper*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_TString),-1,-1,4,"exe=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventDrawer */
static void G__setup_memvarEventDrawer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_EventDrawer));
   { EventDrawer *p; p=(EventDrawer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TGraph),-1,-2,4,"graph=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TF1),-1,-2,4,"epFunc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TF1),-1,-2,4,"gFunc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_RawFileReader),-1,-1,4,"reader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TChain),-1,-1,4,"tree=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"event=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ch=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GFitter */
static void G__setup_memvarGFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_GFitter));
   { GFitter *p; p=(GFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TF1),-1,-2,4,"func=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TGraph),-1,-2,4,"graph=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_GFitter),-1,-2,4,"fitter=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EpFilter */
static void G__setup_memvarEpFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_EpFilter));
   { EpFilter *p; p=(EpFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)(&EpFilter::binSize),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"binSize[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::max),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"max[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::min),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"min[2]=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::windows),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"windows[2][4]=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::emax),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"emax=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::emin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"emin=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::pmax),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"pmax=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::pmin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"pmin=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::ebin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"ebin=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::pbin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"pbin=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::tofmin),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"tofmin=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::tofmax),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"tofmax=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::p0),100,0,0,-1,G__defined_typename("Double_t"),-2,1,"p0[5]=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::p2),100,0,0,-1,G__defined_typename("Double_t"),-2,1,"p2[5]=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::set1),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set1=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::set2a),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set2a=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::set2b),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set2b=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::set3),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set3=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::set4),117,0,0,G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-2,1,"set4=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::EPSCALE),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"EPSCALE=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::MULTIPLICITY),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"MULTIPLICITY=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::COOPER),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"COOPER=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::REV_COOPER),103,0,0,-1,G__defined_typename("Bool_t"),-2,1,"REV_COOPER=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::INVALID_TIMESTAMP),104,0,0,-1,G__defined_typename("UInt_t"),-2,1,"INVALID_TIMESTAMP=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::INVALID_TOF),104,0,0,-1,G__defined_typename("UInt_t"),-2,1,"INVALID_TOF=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::INVALID_E_ENERGY),104,0,0,-1,G__defined_typename("UInt_t"),-2,1,"INVALID_E_ENERGY=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::INVALID_P_ENERGY),104,0,0,-1,G__defined_typename("UInt_t"),-2,1,"INVALID_P_ENERGY=",0,(char*)NULL);
   G__memvar_setup((void*)(&EpFilter::INVALID_CHI2),104,0,0,-1,G__defined_typename("UInt_t"),-2,1,"INVALID_CHI2=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* epComp */
static void G__setup_memvarepComp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_epComp));
   { epComp *p; p=(epComp*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nseries)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nseries=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nrun)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nrun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nevent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_delta_t)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d_delta_t=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_E_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d_E_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_E_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d_E_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_t_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d_t_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_E_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d_E_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_delta_t)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_delta_t=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_E_e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_E_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_E_p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_E_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_t_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_t_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_E_gamma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_E_gamma[14]=",0,(char*)NULL);
   G__memvar_setup((void*)(&epComp::BRANCH),67,0,1,-1,G__defined_typename("Char_t"),-2,1,"BRANCH=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CompareData */
static void G__setup_memvarCompareData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RDKDictLN_CompareData));
   { CompareData *p; p=(CompareData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TTree),-1,-1,4,"result=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RDKDictLN_TFile),-1,-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_epEvent),-1,-1,4,"event=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_epComp),-1,-1,4,"comp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEepEventcOallocatorlEepEventgRsPgR),G__defined_typename("deque<epEvent>"),-1,4,"data1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RDKDictLN_dequelEepEventcOallocatorlEepEventgRsPgR),G__defined_typename("deque<epEvent>"),-1,4,"data2=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRDKDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncRDKConfig(void) {
   /* RDKConfig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_RDKConfig));
   G__memfunc_setup("RDKConfig",823,G__RDKDict_495_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_RDKConfig), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getConfig",918,G__RDKDict_495_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMode",709,G__RDKDict_495_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - - h - 'UInt_t' 0 - -", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t, UInt_t))(&RDKConfig::getMode) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RDKConfig", 823, G__RDKDict_495_0_4, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_RDKConfig), -1, 0, 1, 1, 1, 0, "u 'RDKConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RDKConfig", 949, G__RDKDict_495_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_495_0_6, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_RDKConfig), -1, 1, 1, 1, 1, 0, "u 'RDKConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRDKException(void) {
   /* RDKException */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_RDKException));
   G__memfunc_setup("RDKException",1168,G__RDKDict_509_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_RDKException), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("what",436,G__RDKDict_509_0_2, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 41, "", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RDKException", 1168, G__RDKDict_509_0_3, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_RDKException), -1, 0, 1, 1, 1, 0, "u 'RDKException' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RDKException", 1294, G__RDKDict_509_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_509_0_5, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_RDKException), -1, 1, 1, 1, 1, 0, "u 'RDKException' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRawData(void) {
   /* RawData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_RawData));
   // automatic default constructor
   G__memfunc_setup("RawData", 676, G__RDKDict_510_0_1, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_RawData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RawData", 676, G__RDKDict_510_0_2, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_RawData), -1, 0, 1, 1, 1, 0, "u 'RawData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RawData", 802, G__RDKDict_510_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_510_0_4, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_RawData), -1, 1, 1, 1, 1, 0, "u 'RawData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRecon(void) {
   /* Recon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Recon));
   // automatic default constructor
   G__memfunc_setup("Recon", 503, G__RDKDict_511_0_1, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Recon), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Recon", 503, G__RDKDict_511_0_2, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Recon), -1, 0, 1, 1, 1, 0, "u 'Recon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Recon", 629, G__RDKDict_511_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_511_0_4, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Recon), -1, 1, 1, 1, 1, 0, "u 'Recon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEntry(void) {
   /* Entry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Entry));
   // automatic default constructor
   G__memfunc_setup("Entry", 530, G__RDKDict_512_0_1, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Entry), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Entry", 530, G__RDKDict_512_0_2, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Entry), -1, 0, 1, 1, 1, 0, "u 'Entry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Entry", 656, G__RDKDict_512_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_512_0_4, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Entry), -1, 1, 1, 1, 1, 0, "u 'Entry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBoardEvent(void) {
   /* BoardEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_BoardEvent));
   G__memfunc_setup("BoardEvent",1002,G__RDKDict_513_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_BoardEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BoardEvent",1002,G__RDKDict_513_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_BoardEvent), -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - - u 'Entry' - 11 - - "
"u 'Recon' - 11 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("BoardEvent", 1002, G__RDKDict_513_0_3, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_BoardEvent), -1, 0, 1, 1, 1, 0, "u 'BoardEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BoardEvent", 1128, G__RDKDict_513_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_513_0_5, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_BoardEvent), -1, 1, 1, 1, 1, 0, "u 'BoardEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncepEvent(void) {
   /* epEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_epEvent));
   G__memfunc_setup("epEvent",727,G__RDKDict_514_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_epEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("epEvent",727,G__RDKDict_514_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_epEvent), -1, 0, 1, 1, 1, 0, "u 'epEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("epEvent",727,G__RDKDict_514_0_3, 105, G__get_linked_tagnum(&G__RDKDictLN_epEvent), -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - - u 'Entry' - 11 - - "
"u 'Recon' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("epEvent",727,G__RDKDict_514_0_4, 105, G__get_linked_tagnum(&G__RDKDictLN_epEvent), -1, 0, 3, 1, 1, 0, 
"u 'BoardEvent' - 11 - - u 'BoardEvent' - 11 - - "
"i - 'Int_t' 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RDKDict_514_0_5, 117, G__get_linked_tagnum(&G__RDKDictLN_epEvent), -1, 1, 1, 1, 1, 0, "u 'epEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__RDKDict_514_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'epEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__RDKDict_514_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'epEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__RDKDict_514_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'epEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~epEvent", 853, G__RDKDict_514_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNData(void) {
   /* NData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_NData));
   G__memfunc_setup("NData",456,G__RDKDict_515_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RDKDict_515_0_2, 117, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 1, 1, 1, 1, 0, "u 'NData' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RDKDict_515_0_3, 117, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 1, 1, 1, 1, 0, "I - 'Int_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__RDKDict_515_0_4, 117, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 1, 1, 1, 1, 0, "u 'NData' - 11 - a", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("NData", 456, G__RDKDict_515_0_5, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 0, 1, 1, 1, 0, "u 'NData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~NData", 582, G__RDKDict_515_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTask(void) {
   /* Task */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Task));
   G__memfunc_setup("Task",403,G__RDKDict_516_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_Task), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' - i - 'Int_t' 0 '0' - "
"i - 'Int_t' 0 '0' - c - 'Char_t' 0 ''/0'' - "
"h - 'UInt_t' 0 'DEFAULT_CONFIG' -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Task", 403, G__RDKDict_516_0_2, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Task), -1, 0, 1, 1, 1, 0, "u 'Task' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Task", 529, G__RDKDict_516_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSmoother(void) {
   /* Smoother */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Smoother));
   G__memfunc_setup("clean",515,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Smoother",849,G__RDKDict_581_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_Smoother), -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 '0' - d - 'Double_t' 0 '3' - "
"h - 'UInt_t' 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__RDKDict_581_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - - d - 'Double_t' 0 - - "
"h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("smooth",666,G__RDKDict_581_0_4, 117, G__get_linked_tagnum(&G__RDKDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 1, 1, 1, 8, "u 'TVectorT<double>' 'TVectorD' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("smooth",666,G__RDKDict_581_0_5, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TVectorT<double>' 'TVectorD' 11 - - u 'TVectorT<double>' 'TVectorD' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("smooth",666,G__RDKDict_581_0_6, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TMatrixTRow<double>' 'TMatrixTRow<Double_t>' 11 - - u 'TMatrixTRow<double>' 'TMatrixTRow<Double_t>' 1 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sigma_v",742,G__RDKDict_581_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sigma_h",728,G__RDKDict_581_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Smoother", 849, G__RDKDict_581_0_9, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Smoother), -1, 0, 1, 1, 1, 0, "u 'Smoother' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Smoother", 975, G__RDKDict_581_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_581_0_11, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Smoother), -1, 1, 1, 1, 1, 0, "u 'Smoother' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalyzer(void) {
   /* Analyzer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Analyzer));
   G__memfunc_setup("Analyzer",838,G__RDKDict_582_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_Analyzer), -1, 0, 3, 1, 1, 0, 
"U 'Smoother' - 0 - - U 'Smoother' - 0 - - "
"h - 'UInt_t' 0 'DEFAULT_CONFIG' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("preanalyze",1083,G__RDKDict_582_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'RawData' - 11 - - u 'Recon' - 1 - - "
"i - 'Int_t' 0 - - g - 'Bool_t' 0 'kFALSE' -", "To be used within parallel for loop", (void*) NULL, 0);
   G__memfunc_setup("analyze",756,G__RDKDict_582_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'RawData' - 11 - - u 'Recon' - 1 - - "
"i - 'Int_t' 0 - - g - 'Bool_t' 0 'kFALSE' -", "Uses parallellized smoother, should", (void*) NULL, 0);
   G__memfunc_setup("nullevent",989,G__RDKDict_582_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'Recon' - 1 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setConfig",930,G__RDKDict_582_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getConfig",918,G__RDKDict_582_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Analyzer", 838, G__RDKDict_582_0_7, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Analyzer), -1, 0, 1, 1, 1, 0, "u 'Analyzer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Analyzer", 964, G__RDKDict_582_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_582_0_9, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Analyzer), -1, 1, 1, 1, 1, 0, "u 'Analyzer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBufferedReader(void) {
   /* BufferedReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_BufferedReader));
   G__memfunc_setup("BufferedReader",1398,G__RDKDict_585_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_BufferedReader), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '256' - C - 'Char_t' 10 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_585_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__RDKDict_585_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_open",749,G__RDKDict_585_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("good",425,G__RDKDict_585_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eof",314,G__RDKDict_585_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eob",310,G__RDKDict_585_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tellg",536,G__RDKDict_585_0_8, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("seekg",527,G__RDKDict_585_0_9, 117, G__get_linked_tagnum(&G__RDKDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "n - 'Long64_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("seekg",527,G__RDKDict_585_0_10, 117, G__get_linked_tagnum(&G__RDKDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 2, 1, 1, 0, 
"n - 'Long64_t' 0 - - i - 'ios_base::seekdir' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RDKDict_585_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__RDKDict_585_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__RDKDict_585_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("peak",417,G__RDKDict_585_0_14, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnd",599,G__RDKDict_585_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RDKDict_585_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosition",1173,G__RDKDict_585_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosition",1185,G__RDKDict_585_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChar",702,G__RDKDict_585_0_19, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShort",848,G__RDKDict_585_0_20, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInt",619,G__RDKDict_585_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFloat",822,G__RDKDict_585_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDouble",923,G__RDKDict_585_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getString",951,G__RDKDict_585_0_24, 117, G__get_linked_tagnum(&G__RDKDictLN_TString), -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getString",951,G__RDKDict_585_0_25, 117, G__get_linked_tagnum(&G__RDKDictLN_TString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLine",712,G__RDKDict_585_0_26, 117, G__get_linked_tagnum(&G__RDKDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyChar",825,G__RDKDict_585_0_27, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyShort",971,G__RDKDict_585_0_28, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"S - 'Short_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyInt",742,G__RDKDict_585_0_29, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyFloat",945,G__RDKDict_585_0_30, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyDouble",1046,G__RDKDict_585_0_31, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__RDKDict_585_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BufferedReader", 1524, G__RDKDict_585_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRawTreeReader(void) {
   /* RawTreeReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader));
   G__memfunc_setup("clean",515,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openLog",724,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RawTreeReader",1293,G__RDKDict_589_0_3, 105, G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RawTreeReader",1293,G__RDKDict_589_0_4, 105, G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader), -1, 0, 3, 1, 1, 0, 
"U 'TreeFilter' - 0 - - C - 'Char_t' 10 'RDKANAL' - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RawTreeReader",1293,G__RDKDict_589_0_5, 105, G__get_linked_tagnum(&G__RDKDictLN_RawTreeReader), -1, 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - C - 'Char_t' 10 'RDKANAL' - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RDKDict_589_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openFile",818,G__RDKDict_589_0_7, 117, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openSeries",1053,G__RDKDict_589_0_8, 117, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openSeries",1053,G__RDKDict_589_0_9, 117, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 10 - - "
"C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openList",846,G__RDKDict_589_0_10, 117, G__get_linked_tagnum(&G__RDKDictLN_NData), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getList",732,G__RDKDict_589_0_11, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR), G__defined_typename("vector<Task>"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - - C - 'Char_t' 10 - - "
"C - 'Char_t' 10 'RDKANAL' -", (char*)NULL, (void*) G__func2void( (vector<Task> (*)(Int_t, const Char_t*, const Char_t*))(&RawTreeReader::getList) ), 0);
   G__memfunc_setup("getRawList",1030,G__RDKDict_589_0_12, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR), G__defined_typename("vector<Task>"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - - C - 'Char_t' 10 - - "
"C - 'Char_t' 10 'RDKRAW' -", (char*)NULL, (void*) G__func2void( (vector<Task> (*)(Int_t, const Char_t*, const Char_t*))(&RawTreeReader::getRawList) ), 0);
   G__memfunc_setup("getSeries",939,G__RDKDict_589_0_13, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) G__func2void( (vector<Int_t> (*)(const Char_t*))(&RawTreeReader::getSeries) ), 0);
   // automatic destructor
   G__memfunc_setup("~RawTreeReader", 1419, G__RDKDict_589_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCalibrationData(void) {
   /* CalibrationData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationData));
   G__memfunc_setup("parseString",1170,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationData",1506,G__RDKDict_590_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationData",1506,G__RDKDict_590_0_3, 105, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationData",1506,G__RDKDict_590_0_4, 105, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - n - 'Long64_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationData",1506,G__RDKDict_590_0_5, 105, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 5, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - n - 'Long64_t' 0 - - "
"F - 'Float_t' 12 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFile",704,G__RDKDict_590_0_6, 117, G__get_linked_tagnum(&G__RDKDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRun",629,G__RDKDict_590_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeries",939,G__RDKDict_590_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStartDate",1228,G__RDKDict_590_0_9, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeak",705,G__RDKDict_590_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma",817,G__RDKDict_590_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChiDof",877,G__RDKDict_590_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSum",629,G__RDKDict_590_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("toString",858,G__RDKDict_590_0_14, 117, G__get_linked_tagnum(&G__RDKDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibrate",935,G__RDKDict_590_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "u 'Recon' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>",938,G__RDKDict_590_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'pair<int,int>' 'pair<Int_t,Int_t>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__RDKDict_590_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'pair<int,int>' 'pair<Int_t,Int_t>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__RDKDict_590_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'pair<int,int>' 'pair<Int_t,Int_t>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__RDKDict_590_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'pair<int,int>' 'pair<Int_t,Int_t>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__RDKDict_590_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'pair<int,int>' 'pair<Int_t,Int_t>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibrate",935,G__RDKDict_590_0_24, 85, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 4, 3, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - n - 'Long64_t' 0 - -", (char*)NULL, (void*) G__func2void( (CalibrationData* (*)(Char_t, Int_t, Int_t, Long64_t))(&CalibrationData::calibrate) ), 0);
   G__memfunc_setup("initCalibration",1564,G__RDKDict_590_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CalibrationData::initCalibration) ), 0);
   G__memfunc_setup("fill",423,G__RDKDict_590_0_26, 121, -1, -1, 0, 1, 3, 1, 0, "U 'RawTreeReader' - 0 - -", (char*)NULL, (void*) G__func2void( (void (*)(RawTreeReader*))(&CalibrationData::fill) ), 0);
   G__memfunc_setup("Class",502,G__RDKDict_590_0_27, 85, G__get_linked_tagnum(&G__RDKDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CalibrationData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RDKDict_590_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RDKDict_590_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CalibrationData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RDKDict_590_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CalibrationData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RDKDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RDKDict_590_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RDKDict_590_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RDKDict_590_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalibrationData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RDKDict_590_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RDKDict_590_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalibrationData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CalibrationData", 1506, G__RDKDict_590_0_39, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 1, 1, 1, 0, "u 'CalibrationData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationData", 1632, G__RDKDict_590_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_590_0_41, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 1, 1, 1, 1, 0, "u 'CalibrationData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCalibrationList(void) {
   /* CalibrationList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_CalibrationList));
   G__memfunc_setup("CalibrationList",1540,G__RDKDict_602_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_CalibrationList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationList",1540,G__RDKDict_602_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_CalibrationList), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal",592,G__RDKDict_602_0_3, 85, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal",592,G__RDKDict_602_0_4, 85, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 1, 1, 1, 0, "u 'Entry' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal",592,G__RDKDict_602_0_5, 85, G__get_linked_tagnum(&G__RDKDictLN_CalibrationData), -1, 0, 1, 1, 1, 0, "u 'pair<int,int>' 'pair<Int_t,Int_t>' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibrate",935,G__RDKDict_602_0_6, 117, G__get_linked_tagnum(&G__RDKDictLN_Recon), -1, 0, 2, 1, 1, 0, 
"u 'Entry' - 11 - - u 'Recon' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RDKDict_602_0_7, 85, G__get_linked_tagnum(&G__RDKDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CalibrationList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RDKDict_602_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RDKDict_602_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CalibrationList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RDKDict_602_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CalibrationList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RDKDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RDKDict_602_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RDKDict_602_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RDKDict_602_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalibrationList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RDKDict_602_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalibrationList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RDKDict_602_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalibrationList::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationList", 1666, G__RDKDict_602_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDataReader(void) {
   /* DataReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_DataReader));
   G__memfunc_setup("DataReader",973,G__RDKDict_604_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_DataReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataReader",973,G__RDKDict_604_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_DataReader), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_604_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__RDKDict_604_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_open",749,G__RDKDict_604_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("good",425,G__RDKDict_604_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eof",314,G__RDKDict_604_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tellg",536,G__RDKDict_604_0_8, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("seekg",527,G__RDKDict_604_0_9, 117, G__get_linked_tagnum(&G__RDKDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 1, 1, 1, 0, "n - 'Long64_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("seekg",527,G__RDKDict_604_0_10, 117, G__get_linked_tagnum(&G__RDKDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 2, 1, 1, 0, 
"n - 'Long64_t' 0 - - i - 'ios_base::seekdir' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("peek",421,G__RDKDict_604_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readChar",794,G__RDKDict_604_0_12, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readShort",940,G__RDKDict_604_0_13, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readInt",711,G__RDKDict_604_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readLong",812,G__RDKDict_604_0_15, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readDouble",1015,G__RDKDict_604_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readString",1043,G__RDKDict_604_0_17, 117, G__get_linked_tagnum(&G__RDKDictLN_TString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readLine",804,G__RDKDict_604_0_18, 117, G__get_linked_tagnum(&G__RDKDictLN_TString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '256' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readData",790,G__RDKDict_604_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - S - 'Short_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readData",790,G__RDKDict_604_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readData",790,G__RDKDict_604_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - L - 'Long_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readData",790,G__RDKDict_604_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RDKDict_604_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DataReader", 1099, G__RDKDict_604_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEpgFitFunction(void) {
   /* EpgFitFunction */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction));
   G__memfunc_setup("EpgFitFunction",1413,G__RDKDict_608_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Up",197,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setPoint",854,G__RDKDict_608_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMode",721,G__RDKDict_608_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EpgFitFunction", 1413, G__RDKDict_608_0_6, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_EpgFitFunction), -1, 0, 1, 1, 1, 0, "u 'EpgFitFunction' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EpgFitFunction", 1539, G__RDKDict_608_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHeader(void) {
   /* Header */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Header));
   G__memfunc_setup("parseString",1170,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 3, 4, 0, 
"u 'TString' - 0 - - u 'TString' - 1 - - "
"u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Header",585,G__RDKDict_615_0_3, 105, G__get_linked_tagnum(&G__RDKDictLN_Header), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Header",585,G__RDKDict_615_0_4, 105, G__get_linked_tagnum(&G__RDKDictLN_Header), -1, 0, 1, 1, 1, 0, "U 'TMap' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeader",905,G__RDKDict_615_0_5, 85, G__get_linked_tagnum(&G__RDKDictLN_TMap), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSection",1045,G__RDKDict_615_0_6, 85, G__get_linked_tagnum(&G__RDKDictLN_TMap), -1, 0, 1, 1, 1, 8, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getValue",829,G__RDKDict_615_0_7, 117, G__get_linked_tagnum(&G__RDKDictLN_TString), -1, 1, 1, 1, 1, 8, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSection",1022,G__RDKDict_615_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setValue",841,G__RDKDict_615_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("appendValue",1141,G__RDKDict_615_0_10, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListOfSections",1753,G__RDKDict_615_0_11, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListOfKeys",1325,G__RDKDict_615_0_12, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 1, 1, 1, 8, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTree",957,G__RDKDict_615_0_13, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Header", 585, G__RDKDict_615_0_14, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Header), -1, 0, 1, 1, 1, 0, "u 'Header' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Header", 711, G__RDKDict_615_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_615_0_16, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Header), -1, 1, 1, 1, 1, 0, "u 'Header' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNdatReader(void) {
   /* NdatReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_NdatReader));
   G__memfunc_setup("NdatReader",986,G__RDKDict_625_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_NdatReader), -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - t i - 'Int_t' 0 - s "
"i - 'Int_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readNext",827,G__RDKDict_625_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "u 'NData' - 1 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("NdatReader", 986, G__RDKDict_625_0_3, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_NdatReader), -1, 0, 1, 1, 1, 0, "u 'NdatReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~NdatReader", 1112, G__RDKDict_625_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNdatWriter(void) {
   /* NdatWriter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_NdatWriter));
   G__memfunc_setup("NdatWriter",1028,G__RDKDict_628_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_NdatWriter), -1, 0, 5, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"U 'TFile' - 0 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__RDKDict_628_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("NdatWriter", 1028, G__RDKDict_628_0_3, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_NdatWriter), -1, 0, 1, 1, 1, 0, "u 'NdatWriter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~NdatWriter", 1154, G__RDKDict_628_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPlotter(void) {
   /* Plotter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Plotter));
   G__memfunc_setup("Plotter",746,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RDKDictLN_Plotter), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RDKDict_682_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'RawTreeReader' - 0 - - U 'CalibrationList' - 0 - - "
"U 'CalibrationList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RDKDict_682_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("draw",430,G__RDKDict_682_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("save",431,G__RDKDict_682_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_682_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOnPeak",894,G__RDKDict_682_0_7, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffPeak",988,G__RDKDict_682_0_8, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrePeak",1000,G__RDKDict_682_0_9, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPostPeak",1127,G__RDKDict_682_0_10, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBgc",588,G__RDKDict_682_0_11, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDelta_t",1021,G__RDKDict_682_0_12, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEp",501,G__RDKDict_682_0_13, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("epEvent",727,G__RDKDict_682_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "u 'Recon' - 11 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const Recon&))(&Plotter::epEvent) ), 0);
   G__memfunc_setup("gEvent",617,G__RDKDict_682_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'Recon' - 11 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const Recon&, Int_t))(&Plotter::gEvent) ), 0);
   G__memfunc_setup("isPrePeak",900,G__RDKDict_682_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'Recon' - 11 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const Recon&, Int_t))(&Plotter::isPrePeak) ), 0);
   G__memfunc_setup("isPostPeak",1027,G__RDKDict_682_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'Recon' - 11 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const Recon&, Int_t))(&Plotter::isPostPeak) ), 0);
   G__memfunc_setup("isOnPeak",794,G__RDKDict_682_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'Recon' - 11 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const Recon&, Int_t))(&Plotter::isOnPeak) ), 0);
   G__memfunc_setup("isOffPeak",888,G__RDKDict_682_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'Recon' - 11 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const Recon&, Int_t))(&Plotter::isOffPeak) ), 0);
   G__memfunc_setup("getPlotter",1066,G__RDKDict_682_0_20, 85, G__get_linked_tagnum(&G__RDKDictLN_Plotter), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Plotter* (*)())(&Plotter::getPlotter) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Plotter", 746, G__RDKDict_682_0_21, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Plotter), -1, 0, 1, 1, 1, 0, "u 'Plotter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_682_0_22, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Plotter), -1, 1, 1, 1, 1, 0, "u 'Plotter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncQuantity(void) {
   /* Quantity */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Quantity));
   G__memfunc_setup("Quantity",863,G__RDKDict_683_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Quantity",863,G__RDKDict_683_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getValue",829,G__RDKDict_683_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUncertainty",1494,G__RDKDict_683_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__RDKDict_683_0_5, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("negate",628,G__RDKDict_683_0_6, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RDKDict_683_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__RDKDict_683_0_8, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__RDKDict_683_0_9, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__RDKDict_683_0_10, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__RDKDict_683_0_11, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__RDKDict_683_0_12, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__RDKDict_683_0_13, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__RDKDict_683_0_14, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__RDKDict_683_0_15, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__RDKDict_683_0_16, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__RDKDict_683_0_17, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__RDKDict_683_0_18, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__RDKDict_683_0_19, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__RDKDict_683_0_20, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "u 'Quantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__RDKDict_683_0_21, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__RDKDict_683_0_22, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__RDKDict_683_0_23, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__RDKDict_683_0_24, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Quantity", 863, G__RDKDict_683_0_25, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "u 'Quantity' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Quantity", 989, G__RDKDict_683_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_683_0_27, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 1, 1, 1, 1, 0, "u 'Quantity' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPlotter2(void) {
   /* Plotter2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Plotter2));
   G__memfunc_setup("epFilter",827,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Plotter2",796,G__RDKDict_719_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_Plotter2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RDKDict_719_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("save",431,G__RDKDict_719_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_719_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("draw",430,G__RDKDict_719_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - i - 'Int_t' 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__RDKDict_719_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBgoOnPeak",1174,G__RDKDict_719_0_8, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBgoOffPeak",1268,G__RDKDict_719_0_9, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBgoFinal",1090,G__RDKDict_719_0_10, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBgoDeltaT",1174,G__RDKDict_719_0_11, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd3OnPeak",1320,G__RDKDict_719_0_12, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd3OffPeak",1414,G__RDKDict_719_0_13, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd3Final",1236,G__RDKDict_719_0_14, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd3DeltaT",1320,G__RDKDict_719_0_15, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd4OnPeak",1321,G__RDKDict_719_0_16, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd4OffPeak",1415,G__RDKDict_719_0_17, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd4Final",1237,G__RDKDict_719_0_18, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBapd4DeltaT",1321,G__RDKDict_719_0_19, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSbdEe",771,G__RDKDict_719_0_20, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSbdEp",782,G__RDKDict_719_0_21, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSbdTof",898,G__RDKDict_719_0_22, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSbdEq",783,G__RDKDict_719_0_23, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSbdQTof",979,G__RDKDict_719_0_24, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSbdChi2vE",1114,G__RDKDict_719_0_25, 85, G__get_linked_tagnum(&G__RDKDictLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSbdChi2OfE",1177,G__RDKDict_719_0_26, 85, G__get_linked_tagnum(&G__RDKDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpBgo",781,G__RDKDict_719_0_27, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpBapd3",927,G__RDKDict_719_0_28, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpBapd4",928,G__RDKDict_719_0_29, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpgEpBgo",1065,G__RDKDict_719_0_30, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpgEpBapd3",1211,G__RDKDict_719_0_31, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpgEpBapd4",1212,G__RDKDict_719_0_32, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSet",620,G__RDKDict_719_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSetBound",1124,G__RDKDict_719_0_34, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSetBound",1124,G__RDKDict_719_0_35, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Plotter2", 922, G__RDKDict_719_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRawFileReader(void) {
   /* RawFileReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_RawFileReader));
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'RawData' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readHeader",997,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readBoard",900,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 0, 
"u 'Entry' - 1 - - u 'RawData' - 1 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RawFileReader",1277,G__RDKDict_729_0_4, 105, G__get_linked_tagnum(&G__RDKDictLN_RawFileReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RawFileReader",1277,G__RDKDict_729_0_5, 105, G__get_linked_tagnum(&G__RDKDictLN_RawFileReader), -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__RDKDict_729_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_729_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,G__RDKDict_729_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readNext",827,G__RDKDict_729_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'Entry' - 1 - - u 'RawData' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("seek",424,G__RDKDict_729_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tell",433,G__RDKDict_729_0_11, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RDKDict_729_0_12, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeaders",1020,G__RDKDict_729_0_13, 85, G__get_linked_tagnum(&G__RDKDictLN_Header), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RawFileReader", 1277, G__RDKDict_729_0_14, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_RawFileReader), -1, 0, 1, 1, 1, 0, "u 'RawFileReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RawFileReader", 1403, G__RDKDict_729_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_729_0_16, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_RawFileReader), -1, 1, 1, 1, 1, 0, "u 'RawFileReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreeFilter(void) {
   /* TreeFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_TreeFilter));
   G__memfunc_setup("TreeFilter",1014,G__RDKDict_731_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_TreeFilter), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '4.2e-3' - d - 'Double_t' 0 '1' - "
"d - 'Double_t' 0 '0.7' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valid",528,G__RDKDict_731_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'NData' - 11 - - u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::clog' -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TreeFilter", 1014, G__RDKDict_731_0_3, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_TreeFilter), -1, 0, 1, 1, 1, 0, "u 'TreeFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreeFilter", 1140, G__RDKDict_731_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_731_0_5, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_TreeFilter), -1, 1, 1, 1, 1, 0, "u 'TreeFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETaskcOallocatorlETaskgRsPgR(void) {
   /* vector<Task,allocator<Task> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR));
   G__memfunc_setup("at",213,G__RDKDict_733_0_1, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), G__defined_typename("vector<Task,allocator<Task> >::reference"), 1, 1, 1, 1, 0, "h - 'vector<Task,allocator<Task> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__RDKDict_733_0_2, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), G__defined_typename("vector<Task,allocator<Task> >::const_reference"), 1, 1, 1, 1, 8, "h - 'vector<Task,allocator<Task> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__RDKDict_733_0_3, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__RDKDict_733_0_4, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__RDKDict_733_0_5, 117, G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLiteratorgR), G__defined_typename("vector<Task,allocator<Task> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__RDKDict_733_0_6, 117, G__get_linked_tagnum(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLiteratorgR), G__defined_typename("vector<Task,allocator<Task> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__RDKDict_733_0_7, 104, -1, G__defined_typename("vector<Task,allocator<Task> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__RDKDict_733_0_8, 104, -1, G__defined_typename("vector<Task,allocator<Task> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__RDKDict_733_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<Task,allocator<Task> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__RDKDict_733_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<Task,allocator<Task> >::size_type' 0 - sz u 'Task' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__RDKDict_733_0_11, 104, -1, G__defined_typename("vector<Task,allocator<Task> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__RDKDict_733_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RDKDict_733_0_13, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), G__defined_typename("vector<Task,allocator<Task> >::reference"), 1, 1, 1, 1, 0, "h - 'vector<Task,allocator<Task> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RDKDict_733_0_14, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), G__defined_typename("vector<Task,allocator<Task> >::const_reference"), 1, 1, 1, 1, 8, "h - 'vector<Task,allocator<Task> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Task,allocator<Task> >",2746,G__RDKDict_733_0_15, 105, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Task,allocator<Task> >",2746,G__RDKDict_733_0_16, 105, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<Task,allocator<Task> >::size_type' 0 - n u 'Task' - 11 'Task()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Task,allocator<Task> >",2746,G__RDKDict_733_0_17, 105, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<Task,allocator<Task> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Task,allocator<Task> >",2746,G__RDKDict_733_0_18, 105, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<Task,allocator<Task> >::const_iterator' - 0 - first u 'vector<Task,allocator<Task> >::const_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RDKDict_733_0_19, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<Task,allocator<Task> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__RDKDict_733_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<Task,allocator<Task> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__RDKDict_733_0_21, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__RDKDict_733_0_22, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__RDKDict_733_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Task' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__RDKDict_733_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Task,allocator<Task> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__RDKDict_733_0_25, 117, G__get_linked_tagnum(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<Task,allocator<Task> >::iterator' - 0 - position u 'Task' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__RDKDict_733_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Task,allocator<Task> >::iterator' - 0 - position u 'vector<Task,allocator<Task> >::const_iterator' - 0 - first "
"u 'vector<Task,allocator<Task> >::const_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__RDKDict_733_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Task,allocator<Task> >::iterator' - 0 - position h - 'vector<Task,allocator<Task> >::size_type' 0 - n "
"u 'Task' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__RDKDict_733_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__RDKDict_733_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Task,allocator<Task> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__RDKDict_733_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<Task,allocator<Task> >::iterator' - 0 - first u 'vector<Task,allocator<Task> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RDKDict_733_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<Task,allocator<Task> >", 2872, G__RDKDict_733_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRDKReader(void) {
   /* RDKReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_RDKReader));
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'RawData' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readHeader",997,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFooter",1035,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readBoard",900,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"u 'Entry' - 1 - - u 'RawData' - 1 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_741_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("close",534,G__RDKDict_741_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeaders",1020,G__RDKDict_741_0_9, 85, G__get_linked_tagnum(&G__RDKDictLN_Header), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,G__RDKDict_741_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("readNext",827,G__RDKDict_741_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'Entry' - 1 - - u 'RawData' - 1 - -", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~RDKReader", 946, G__RDKDict_741_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_741_0_13, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_RDKReader), -1, 1, 1, 1, 1, 0, "u 'RDKReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncThreadedAnalyzer(void) {
   /* ThreadedAnalyzer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer));
   G__memfunc_setup("initialize",1074,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyzeEP",905,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'RawData' - 11 - - u 'Recon' - 1 - - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ThreadedAnalyzer",1639,G__RDKDict_771_0_3, 105, G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ThreadedAnalyzer",1639,G__RDKDict_771_0_4, 105, G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer), -1, 0, 1, 1, 1, 0, "u 'Task' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyze",756,G__RDKDict_771_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'RawData' - 11 - - u 'Recon' - 1 - - "
"i - 'Int_t' 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_771_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - h - 'UInt_t' 0 'DEFAULT_CONFIG' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__RDKDict_771_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Task' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__RDKDict_771_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("run",341,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clean",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("ThreadedAnalyzer", 1639, G__RDKDict_771_0_11, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_ThreadedAnalyzer), -1, 0, 1, 1, 1, 0, "u 'ThreadedAnalyzer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ThreadedAnalyzer", 1765, G__RDKDict_771_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncqueuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR(void) {
   /* queue<Task,deque<Task,allocator<Task> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR));
   G__memfunc_setup("queue<Task,deque<Task,allocator<Task> > >",3769,G__RDKDict_777_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__RDKDict_777_0_2, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__RDKDict_777_0_3, 104, -1, G__defined_typename("queue<Task,deque<Task,allocator<Task> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__RDKDict_777_0_4, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), G__defined_typename("queue<Task,deque<Task,allocator<Task> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__RDKDict_777_0_5, 117, G__get_linked_tagnum(&G__RDKDictLN_Task), G__defined_typename("queue<Task,deque<Task,allocator<Task> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push",448,G__RDKDict_777_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Task' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop",335,G__RDKDict_777_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("queue<Task,deque<Task,allocator<Task> > >", 3769, G__RDKDict_777_0_8, (int) ('i'), 
G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'queue<Task,deque<Task,allocator<Task> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~queue<Task,deque<Task,allocator<Task> > >", 3895, G__RDKDict_777_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_777_0_10, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'queue<Task,deque<Task,allocator<Task> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSecondPass(void) {
   /* SecondPass */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_SecondPass));
   G__memfunc_setup("singleBitECC",1132,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("glitchECC",838,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sync",445,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("flushBuffer",1148,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillBuffer",1025,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("flushGlitches",1365,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiplicity",1321,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SecondPass",1011,G__RDKDict_778_0_10, 105, G__get_linked_tagnum(&G__RDKDictLN_SecondPass), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - - c - 'Char_t' 0 - - "
"i - 'Int_t' 0 - - h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RDKDict_778_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SecondPass", 1011, G__RDKDict_778_0_12, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_SecondPass), -1, 0, 1, 1, 1, 0, "u 'SecondPass' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SecondPass", 1137, G__RDKDict_778_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRunnable(void) {
   /* Runnable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_Runnable));
   G__memfunc_setup("run",341,G__RDKDict_796_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("clean",515,G__RDKDict_796_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~Runnable", 949, G__RDKDict_796_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_796_0_4, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_Runnable), -1, 1, 1, 1, 1, 0, "u 'Runnable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncThreadRunner(void) {
   /* ThreadRunner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_ThreadRunner));
   G__memfunc_setup("ThreadRunner",1234,G__RDKDict_798_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_ThreadRunner), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - U 'Runnable' - 0 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("exec",421,G__RDKDict_798_0_2, 89, -1, -1, 0, 1, 3, 1, 0, "Y - - 0 - -", (char*)NULL, (void*) G__func2void( (void* (*)(void*))(&ThreadRunner::exec) ), 0);
   G__memfunc_setup("clean",515,G__RDKDict_798_0_3, 89, -1, -1, 0, 1, 3, 1, 0, "Y - - 0 - -", (char*)NULL, (void*) G__func2void( (void* (*)(void*))(&ThreadRunner::clean) ), 0);
   G__memfunc_setup("run",341,G__RDKDict_798_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'Runnable' - 0 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThread",920,G__RDKDict_798_0_5, 85, G__get_linked_tagnum(&G__RDKDictLN_TThread), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getState",833,G__RDKDict_798_0_6, 105, G__get_linked_tagnum(&G__RDKDictLN_TThreadcLcLEState), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ThreadRunner", 1234, G__RDKDict_798_0_7, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_ThreadRunner), -1, 0, 1, 1, 1, 0, "u 'ThreadRunner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ThreadRunner", 1360, G__RDKDict_798_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_798_0_9, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_ThreadRunner), -1, 1, 1, 1, 1, 0, "u 'ThreadRunner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncThreadQueue(void) {
   /* ThreadQueue */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_ThreadQueue));
   G__memfunc_setup("ThreadQueue",1117,G__RDKDict_799_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_ThreadQueue), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("exec",421,G__RDKDict_799_0_2, 89, -1, -1, 0, 1, 3, 1, 0, "Y - - 0 - -", (char*)NULL, (void*) G__func2void( (void* (*)(void*))(&ThreadQueue::exec) ), 0);
   G__memfunc_setup("clean",515,G__RDKDict_799_0_3, 89, -1, -1, 0, 1, 3, 1, 0, "Y - - 0 - -", (char*)NULL, (void*) G__func2void( (void* (*)(void*))(&ThreadQueue::clean) ), 0);
   G__memfunc_setup("add",297,G__RDKDict_799_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Runnable' - 0 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("run",341,G__RDKDict_799_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ThreadQueue", 1117, G__RDKDict_799_0_6, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_ThreadQueue), -1, 0, 1, 1, 1, 0, "u 'ThreadQueue' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ThreadQueue", 1243, G__RDKDict_799_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_799_0_8, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_ThreadQueue), -1, 1, 1, 1, 1, 0, "u 'ThreadQueue' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMultiThread(void) {
   /* MultiThread */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_MultiThread));
   G__memfunc_setup("MultiThread",1123,G__RDKDict_805_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_MultiThread), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__RDKDict_805_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Runnable' - 0 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("run",341,G__RDKDict_805_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MultiThread", 1123, G__RDKDict_805_0_4, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_MultiThread), -1, 0, 1, 1, 1, 0, "u 'MultiThread' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MultiThread", 1249, G__RDKDict_805_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_805_0_6, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_MultiThread), -1, 1, 1, 1, 1, 0, "u 'MultiThread' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEpFitter(void) {
   /* EpFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_EpFitter));
   G__memfunc_setup("EpFitter",803,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RDKDictLN_EpFitter), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitter",942,G__RDKDict_821_0_2, 85, G__get_linked_tagnum(&G__RDKDictLN_EpFitter), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (EpFitter* (*)())(&EpFitter::getFitter) ), 0);
   G__memfunc_setup("fit",323,G__RDKDict_821_0_3, 117, G__get_linked_tagnum(&G__RDKDictLN_TFitResultPtr), -1, 0, 2, 1, 1, 0, 
"S - 'Short_t' 10 - - D - 'Double_t' 10 - -", "7 parameters", (void*) NULL, 0);
   G__memfunc_setup("getFunc",716,G__RDKDict_821_0_4, 85, G__get_linked_tagnum(&G__RDKDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGraph",818,G__RDKDict_821_0_5, 85, G__get_linked_tagnum(&G__RDKDictLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EpFitter", 803, G__RDKDict_821_0_6, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_EpFitter), -1, 0, 1, 1, 1, 0, "u 'EpFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EpFitter", 929, G__RDKDict_821_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_821_0_8, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_EpFitter), -1, 1, 1, 1, 1, 0, "u 'EpFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreeReader(void) {
   /* TreeReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_TreeReader));
   G__memfunc_setup("clean",515,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreeReader",995,G__RDKDict_822_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_TreeReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openSeries",1053,G__RDKDict_822_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RDKDict_822_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TreeReader", 995, G__RDKDict_822_0_5, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_TreeReader), -1, 0, 1, 1, 1, 0, "u 'TreeReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreeReader", 1121, G__RDKDict_822_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_822_0_7, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_TreeReader), -1, 1, 1, 1, 1, 0, "u 'TreeReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncExeWrapper(void) {
   /* ExeWrapper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper));
   G__memfunc_setup("ExeWrapper",1027,G__RDKDict_823_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExe",622,G__RDKDict_823_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - cmd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("run",341,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clean",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("ExeWrapper", 1027, G__RDKDict_823_0_5, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper), -1, 0, 1, 1, 1, 0, "u 'ExeWrapper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ExeWrapper", 1153, G__RDKDict_823_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_823_0_7, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_ExeWrapper), -1, 1, 1, 1, 1, 0, "u 'ExeWrapper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventDrawer(void) {
   /* EventDrawer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_EventDrawer));
   G__memfunc_setup("EventDrawer",1127,G__RDKDict_824_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_EventDrawer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openSeries",1053,G__RDKDict_824_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawEvent",944,G__RDKDict_824_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' - i - 'Int_t' 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("draw",430,G__RDKDict_824_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'epEvent' - 11 - - u 'RawData' - 11 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpFunc",897,G__RDKDict_824_0_5, 85, G__get_linked_tagnum(&G__RDKDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGFunc",787,G__RDKDict_824_0_6, 85, G__get_linked_tagnum(&G__RDKDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGraph",818,G__RDKDict_824_0_7, 85, G__get_linked_tagnum(&G__RDKDictLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EventDrawer", 1127, G__RDKDict_824_0_8, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_EventDrawer), -1, 0, 1, 1, 1, 0, "u 'EventDrawer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventDrawer", 1253, G__RDKDict_824_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_824_0_10, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_EventDrawer), -1, 1, 1, 1, 1, 0, "u 'EventDrawer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGFitter(void) {
   /* GFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_GFitter));
   G__memfunc_setup("GFitter",693,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RDKDictLN_GFitter), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitter",942,G__RDKDict_825_0_2, 85, G__get_linked_tagnum(&G__RDKDictLN_GFitter), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (GFitter* (*)())(&GFitter::getFitter) ), 0);
   G__memfunc_setup("fit",323,G__RDKDict_825_0_3, 117, G__get_linked_tagnum(&G__RDKDictLN_TFitResultPtr), -1, 0, 2, 1, 1, 0, 
"S - 'Short_t' 10 - - D - 'Double_t' 10 - -", "6 parameters", (void*) NULL, 0);
   G__memfunc_setup("getFunc",716,G__RDKDict_825_0_4, 85, G__get_linked_tagnum(&G__RDKDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGraph",818,G__RDKDict_825_0_5, 85, G__get_linked_tagnum(&G__RDKDictLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FixParamter",1123,G__RDKDict_825_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReleaseParameter",1634,G__RDKDict_825_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GFitter", 693, G__RDKDict_825_0_8, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_GFitter), -1, 0, 1, 1, 1, 0, "u 'GFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GFitter", 819, G__RDKDict_825_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_825_0_10, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_GFitter), -1, 1, 1, 1, 1, 0, "u 'GFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEpFilter(void) {
   /* EpFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_EpFilter));
   G__memfunc_setup("EpFilter",795,G__RDKDict_826_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_EpFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isValid",716,G__RDKDict_826_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__RDKDict_826_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSet",620,G__RDKDict_826_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSetBound",1124,G__RDKDict_826_0_5, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSetBound",1124,G__RDKDict_826_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'epEvent' - 1 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EpFilter", 795, G__RDKDict_826_0_7, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_EpFilter), -1, 0, 1, 1, 1, 0, "u 'EpFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EpFilter", 921, G__RDKDict_826_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_826_0_9, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_EpFilter), -1, 1, 1, 1, 1, 0, "u 'EpFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncepComp(void) {
   /* epComp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_epComp));
   G__memfunc_setup("epComp",612,G__RDKDict_925_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_epComp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("epComp",612,G__RDKDict_925_0_2, 105, G__get_linked_tagnum(&G__RDKDictLN_epComp), -1, 0, 1, 1, 1, 0, "u 'epComp' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~epComp", 738, G__RDKDict_925_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_925_0_4, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_epComp), -1, 1, 1, 1, 1, 0, "u 'epComp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCompareData(void) {
   /* CompareData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RDKDictLN_CompareData));
   G__memfunc_setup("CompareData",1089,G__RDKDict_926_0_1, 105, G__get_linked_tagnum(&G__RDKDictLN_CompareData), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__RDKDict_926_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TTree' - 0 - - U 'TTree' - 0 - - "
"u 'TString' - 0 '\"\"' - u 'TString' - 0 '\"\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResult",959,G__RDKDict_926_0_3, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CompareData", 1089, G__RDKDict_926_0_4, (int) ('i'), G__get_linked_tagnum(&G__RDKDictLN_CompareData), -1, 0, 1, 1, 1, 0, "u 'CompareData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CompareData", 1215, G__RDKDict_926_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RDKDict_926_0_6, (int) ('u'), G__get_linked_tagnum(&G__RDKDictLN_CompareData), -1, 1, 1, 1, 1, 0, "u 'CompareData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRDKDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&NGAMMA),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"NGAMMA=",0,(char*)NULL);
   G__memvar_setup((void*)(&NPOINTS),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"NPOINTS=",0,(char*)NULL);
   G__memvar_setup((void*)(&NFLAT),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"NFLAT=",0,(char*)NULL);
   G__memvar_setup((void*)(&RDKANAL),67,0,1,-1,G__defined_typename("Char_t"),-1,1,"RDKANAL=",0,(char*)NULL);
   G__memvar_setup((void*)(&RDKRAW),67,0,1,-1,G__defined_typename("Char_t"),-1,1,"RDKRAW=",0,(char*)NULL);
   G__memvar_setup((void*)(&RDKHOME),67,0,1,-1,G__defined_typename("Char_t"),-1,1,"RDKHOME=",0,(char*)NULL);
   G__memvar_setup((void*)(&WORKDIR),67,0,0,-1,G__defined_typename("Char_t"),-1,1,"WORKDIR=",0,(char*)NULL);
   G__memvar_setup((void*)(&rdk2config),85,0,0,G__get_linked_tagnum(&G__RDKDictLN_RDKConfig),-1,-1,1,"rdk2config=",0,(char*)NULL);
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRDKDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
   G__memfunc_setup("operator<<", 996, G__RDKDict__0_879, 117, G__get_linked_tagnum(&G__RDKDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - - u 'Task' - 11 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<<", 996, G__RDKDict__0_894, 117, G__get_linked_tagnum(&G__RDKDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - - u 'CalibrationData' - 11 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<<", 996, G__RDKDict__0_895, 117, G__get_linked_tagnum(&G__RDKDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - - u 'CalibrationList' - 11 - -", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func9() {
   G__memfunc_setup("operator+", 919, G__RDKDict__0_925, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - u 'Quantity' - 11 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__RDKDict__0_926, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - u 'Quantity' - 11 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator*", 918, G__RDKDict__0_927, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - u 'Quantity' - 11 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator/", 923, G__RDKDict__0_928, 117, G__get_linked_tagnum(&G__RDKDictLN_Quantity), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - u 'Quantity' - 11 - -", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
   G__memfunc_setup("getConfig", 918, G__RDKDict__0_1191, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("setNThreads", 1125, G__RDKDict__0_1192, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fitTest", 739, G__RDKDict__0_1193, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'RawData' - 11 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("testRun", 757, G__RDKDict__0_1194, 121, -1, -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("logNdat", 713, G__RDKDict__0_1195, 121, -1, -1, 0, 1, 1, 1, 0, "u 'NData' - 11 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("crunchDisk", 1038, G__RDKDict__0_1196, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'AnalyzerMode' - 0 - - i - 'Int_t' 0 '0' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("crunchSeries", 1262, G__RDKDict__0_1197, 121, -1, -1, 0, 3, 1, 1, 0, 
"i 'AnalyzerMode' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 '0' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("buildQueue", 1045, G__RDKDict__0_1212, 117, G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR), G__defined_typename("queue<Task>"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' - C - 'Char_t' 10 '\"SCD\"' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("buildQueue", 1045, G__RDKDict__0_1213, 117, G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR), G__defined_typename("queue<Task>"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("queueFromFile", 1337, G__RDKDict__0_1214, 117, G__get_linked_tagnum(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR), G__defined_typename("queue<Task>"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - C - 'Char_t' 10 '\"SCD\"' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("crunch", 643, G__RDKDict__0_1215, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("crunch", 643, G__RDKDict__0_1216, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'queue<Task,deque<Task,allocator<Task> > >' 'queue<Task>' 0 - - i - 'Int_t' 0 '0' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("crunch", 643, G__RDKDict__0_1217, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'queue<Task,deque<Task,allocator<Task> > >' 'queue<Task>' 0 - - i 'AnalyzerMode' - 0 - - "
"i - 'Int_t' 0 '0' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fitFunction", 1161, G__RDKDict__0_1218, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("cooperAnalysis", 1484, G__RDKDict__0_1219, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'RawData' - 11 - - I - 'Int_t' 0 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("cooperTest", 1064, G__RDKDict__0_1220, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'RawFileReader' - 0 - - U 'TTree' - 0 - - "
"d - 'Double_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("calibrate", 935, G__RDKDict__0_1221, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("updateNdat", 1034, G__RDKDict__0_1222, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func12() {
   G__memfunc_setup("exportTimestamps", 1737, G__RDKDict__0_1223, 121, -1, -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("crunchFromFile", 1431, G__RDKDict__0_1224, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - C - 'Char_t' 10 '\"SCD\"' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("second_pass", 1170, G__RDKDict__0_1225, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"\"' - g - 'Bool_t' 0 'kTRUE' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("importConfig", 1265, G__RDKDict__0_1226, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("createEpCal", 1081, G__RDKDict__0_1227, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("graphMatt", 936, G__RDKDict__0_1228, 85, G__get_linked_tagnum(&G__RDKDictLN_TGraph), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("egraphMatt", 1037, G__RDKDict__0_1229, 85, G__get_linked_tagnum(&G__RDKDictLN_TGraphErrors), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("openAllTrees", 1230, G__RDKDict__0_1230, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("openSet1", 783, G__RDKDict__0_1231, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("openSet2", 784, G__RDKDict__0_1232, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("openSet2a", 881, G__RDKDict__0_1233, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("openSet2b", 882, G__RDKDict__0_1234, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("openSet3", 785, G__RDKDict__0_1235, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("openSet4", 786, G__RDKDict__0_1236, 85, G__get_linked_tagnum(&G__RDKDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("exportTree", 1074, G__RDKDict__0_1237, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - - u 'TString' - 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("importJeffData", 1424, G__RDKDict__0_1238, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("parseJeffLine", 1310, G__RDKDict__0_1239, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - u 'epEvent' - 1 - -", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRDKDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RDKDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_ROOT = { "ROOT" , 110 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR = { "basic_istream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_RDKConfig = { "RDKConfig" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR = { "map<unsigned int,unsigned int,less<unsigned int>,allocator<pair<const unsigned int,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_exception = { "exception" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_AnalyzerMode = { "AnalyzerMode" , 101 , -1 };
G__linked_taginfo G__RDKDictLN_RDKException = { "RDKException" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_RawData = { "RawData" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_Recon = { "Recon" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_Entry = { "Entry" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_BoardEvent = { "BoardEvent" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_epEvent = { "epEvent" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_NData = { "NData" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_Task = { "Task" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_Smoother = { "Smoother" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_Analyzer = { "Analyzer" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_boost = { "boost" , 110 , -1 };
G__linked_taginfo G__RDKDictLN_boostcLcLifstream = { "boost::ifstream" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_BufferedReader = { "BufferedReader" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TBits = { "TBits" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_RawTreeReader = { "RawTreeReader" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_CalibrationData = { "CalibrationData" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_pairlEintcOintgR = { "pair<int,int>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TObjLink = { "TObjLink" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_TSortedList = { "TSortedList" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_CalibrationList = { "CalibrationList" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_buffer_t = { "buffer_t" , 117 , -1 };
G__linked_taginfo G__RDKDictLN_DataReader = { "DataReader" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_ROOTcLcLMinuit2 = { "ROOT::Minuit2" , 110 , -1 };
G__linked_taginfo G__RDKDictLN_ROOTcLcLMinuit2cLcLGenericFunction = { "ROOT::Minuit2::GenericFunction" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_ROOTcLcLMinuit2cLcLFCNBase = { "ROOT::Minuit2::FCNBase" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_EpgFitFunction = { "EpgFitFunction" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_Header = { "Header" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR = { "iterator<random_access_iterator_tag,TString,long,TString*,TString&>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_NdatReader = { "NdatReader" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_NdatWriter = { "NdatWriter" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMutex = { "TMutex" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TThread = { "TThread" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TThreadcLcLEState = { "TThread::EState" , 101 , -1 };
G__linked_taginfo G__RDKDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_Plotter = { "Plotter" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_Quantity = { "Quantity" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TFitResultPtr = { "TFitResultPtr" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_Plotter2 = { "Plotter2" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR = { "iterator<random_access_iterator_tag,int,long,int*,int&>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<int,allocator<int> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_RawFileReader = { "RawFileReader" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TreeFilter = { "TreeFilter" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR = { "vector<Task,allocator<Task> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iterator = { "vector<Task,allocator<Task> >::const_iterator" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLiterator = { "vector<Task,allocator<Task> >::iterator" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Task,allocator<Task> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR = { "iterator<random_access_iterator_tag,Task,long,Task*,Task&>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<Task,allocator<Task> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_RDKReader = { "RDKReader" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_ThreadedAnalyzer = { "ThreadedAnalyzer" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_dequelETaskcOallocatorlETaskgRsPgR = { "deque<Task,allocator<Task> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR = { "queue<Task,deque<Task,allocator<Task> > >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_SecondPass = { "SecondPass" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_SecondPasscLcLMultiplicityCompare = { "SecondPass::MultiplicityCompare" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_dequelEepEventcOallocatorlEepEventgRsPgR = { "deque<epEvent,allocator<epEvent> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_dequelEEntrycOallocatorlEEntrygRsPgR = { "deque<Entry,allocator<Entry> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_dequelEReconcOallocatorlERecongRsPgR = { "deque<Recon,allocator<Recon> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_dequelEBoardEventcOallocatorlEBoardEventgRsPgR = { "deque<BoardEvent,allocator<BoardEvent> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_Runnable = { "Runnable" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_ThreadRunner = { "ThreadRunner" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_ThreadQueue = { "ThreadQueue" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_dequelERunnablemUcOallocatorlERunnablemUgRsPgR = { "deque<Runnable*,allocator<Runnable*> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_queuelERunnablemUcOdequelERunnablemUcOallocatorlERunnablemUgRsPgRsPgR = { "queue<Runnable*,deque<Runnable*,allocator<Runnable*> > >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_MultiThread = { "MultiThread" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR = { "vector<SyncThread*,allocator<SyncThread*> >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SyncThread*,allocator<SyncThread*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR = { "iterator<random_access_iterator_tag,SyncThread*,long,SyncThread**,SyncThread*&>" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<SyncThread*,allocator<SyncThread*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_EpFitFunction = { "EpFitFunction" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TMarker = { "TMarker" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TLine = { "TLine" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TLatex = { "TLatex" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_EpFitter = { "EpFitter" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_TreeReader = { "TreeReader" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_ExeWrapper = { "ExeWrapper" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_EventDrawer = { "EventDrawer" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_GFitter = { "GFitter" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_EpFilter = { "EpFilter" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__RDKDictLN_epComp = { "epComp" , 115 , -1 };
G__linked_taginfo G__RDKDictLN_CompareData = { "CompareData" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRDKDict() {
  G__RDKDictLN_TClass.tagnum = -1 ;
  G__RDKDictLN_TBuffer.tagnum = -1 ;
  G__RDKDictLN_TMemberInspector.tagnum = -1 ;
  G__RDKDictLN_TObject.tagnum = -1 ;
  G__RDKDictLN_TCollection.tagnum = -1 ;
  G__RDKDictLN_TString.tagnum = -1 ;
  G__RDKDictLN_ROOT.tagnum = -1 ;
  G__RDKDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__RDKDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__RDKDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__RDKDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__RDKDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__RDKDictLN_string.tagnum = -1 ;
  G__RDKDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__RDKDictLN_TList.tagnum = -1 ;
  G__RDKDictLN_TObjArray.tagnum = -1 ;
  G__RDKDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__RDKDictLN_RDKConfig.tagnum = -1 ;
  G__RDKDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__RDKDictLN_exception.tagnum = -1 ;
  G__RDKDictLN_AnalyzerMode.tagnum = -1 ;
  G__RDKDictLN_RDKException.tagnum = -1 ;
  G__RDKDictLN_RawData.tagnum = -1 ;
  G__RDKDictLN_Recon.tagnum = -1 ;
  G__RDKDictLN_Entry.tagnum = -1 ;
  G__RDKDictLN_BoardEvent.tagnum = -1 ;
  G__RDKDictLN_epEvent.tagnum = -1 ;
  G__RDKDictLN_NData.tagnum = -1 ;
  G__RDKDictLN_Task.tagnum = -1 ;
  G__RDKDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__RDKDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__RDKDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__RDKDictLN_Smoother.tagnum = -1 ;
  G__RDKDictLN_Analyzer.tagnum = -1 ;
  G__RDKDictLN_boost.tagnum = -1 ;
  G__RDKDictLN_boostcLcLifstream.tagnum = -1 ;
  G__RDKDictLN_BufferedReader.tagnum = -1 ;
  G__RDKDictLN_TH1.tagnum = -1 ;
  G__RDKDictLN_TF1.tagnum = -1 ;
  G__RDKDictLN_TBits.tagnum = -1 ;
  G__RDKDictLN_RawTreeReader.tagnum = -1 ;
  G__RDKDictLN_CalibrationData.tagnum = -1 ;
  G__RDKDictLN_pairlEintcOintgR.tagnum = -1 ;
  G__RDKDictLN_TSeqCollection.tagnum = -1 ;
  G__RDKDictLN_TObjLink.tagnum = -1 ;
  G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__RDKDictLN_TSortedList.tagnum = -1 ;
  G__RDKDictLN_CalibrationList.tagnum = -1 ;
  G__RDKDictLN_buffer_t.tagnum = -1 ;
  G__RDKDictLN_DataReader.tagnum = -1 ;
  G__RDKDictLN_ROOTcLcLMinuit2.tagnum = -1 ;
  G__RDKDictLN_ROOTcLcLMinuit2cLcLGenericFunction.tagnum = -1 ;
  G__RDKDictLN_ROOTcLcLMinuit2cLcLFCNBase.tagnum = -1 ;
  G__RDKDictLN_EpgFitFunction.tagnum = -1 ;
  G__RDKDictLN_TMap.tagnum = -1 ;
  G__RDKDictLN_Header.tagnum = -1 ;
  G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__RDKDictLN_NdatReader.tagnum = -1 ;
  G__RDKDictLN_TFile.tagnum = -1 ;
  G__RDKDictLN_TTree.tagnum = -1 ;
  G__RDKDictLN_NdatWriter.tagnum = -1 ;
  G__RDKDictLN_TMutex.tagnum = -1 ;
  G__RDKDictLN_TThread.tagnum = -1 ;
  G__RDKDictLN_TThreadcLcLEState.tagnum = -1 ;
  G__RDKDictLN_TCanvas.tagnum = -1 ;
  G__RDKDictLN_Plotter.tagnum = -1 ;
  G__RDKDictLN_Quantity.tagnum = -1 ;
  G__RDKDictLN_TFitResultPtr.tagnum = -1 ;
  G__RDKDictLN_TH1F.tagnum = -1 ;
  G__RDKDictLN_TH2F.tagnum = -1 ;
  G__RDKDictLN_Plotter2.tagnum = -1 ;
  G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__RDKDictLN_RawFileReader.tagnum = -1 ;
  G__RDKDictLN_TChain.tagnum = -1 ;
  G__RDKDictLN_TreeFilter.tagnum = -1 ;
  G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR.tagnum = -1 ;
  G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iterator.tagnum = -1 ;
  G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLiterator.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__RDKDictLN_RDKReader.tagnum = -1 ;
  G__RDKDictLN_ThreadedAnalyzer.tagnum = -1 ;
  G__RDKDictLN_TGraph.tagnum = -1 ;
  G__RDKDictLN_TGraphErrors.tagnum = -1 ;
  G__RDKDictLN_dequelETaskcOallocatorlETaskgRsPgR.tagnum = -1 ;
  G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR.tagnum = -1 ;
  G__RDKDictLN_SecondPass.tagnum = -1 ;
  G__RDKDictLN_SecondPasscLcLMultiplicityCompare.tagnum = -1 ;
  G__RDKDictLN_dequelEepEventcOallocatorlEepEventgRsPgR.tagnum = -1 ;
  G__RDKDictLN_dequelEEntrycOallocatorlEEntrygRsPgR.tagnum = -1 ;
  G__RDKDictLN_dequelEReconcOallocatorlERecongRsPgR.tagnum = -1 ;
  G__RDKDictLN_dequelEBoardEventcOallocatorlEBoardEventgRsPgR.tagnum = -1 ;
  G__RDKDictLN_Runnable.tagnum = -1 ;
  G__RDKDictLN_ThreadRunner.tagnum = -1 ;
  G__RDKDictLN_ThreadQueue.tagnum = -1 ;
  G__RDKDictLN_dequelERunnablemUcOallocatorlERunnablemUgRsPgR.tagnum = -1 ;
  G__RDKDictLN_queuelERunnablemUcOdequelERunnablemUcOallocatorlERunnablemUgRsPgRsPgR.tagnum = -1 ;
  G__RDKDictLN_MultiThread.tagnum = -1 ;
  G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR.tagnum = -1 ;
  G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__RDKDictLN_EpFitFunction.tagnum = -1 ;
  G__RDKDictLN_TMarker.tagnum = -1 ;
  G__RDKDictLN_TLine.tagnum = -1 ;
  G__RDKDictLN_TLatex.tagnum = -1 ;
  G__RDKDictLN_EpFitter.tagnum = -1 ;
  G__RDKDictLN_TreeReader.tagnum = -1 ;
  G__RDKDictLN_ExeWrapper.tagnum = -1 ;
  G__RDKDictLN_EventDrawer.tagnum = -1 ;
  G__RDKDictLN_GFitter.tagnum = -1 ;
  G__RDKDictLN_EpFilter.tagnum = -1 ;
  G__RDKDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__RDKDictLN_epComp.tagnum = -1 ;
  G__RDKDictLN_CompareData.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRDKDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TString);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_ROOT);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_string);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TList);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_RDKConfig),sizeof(RDKConfig),-1,33792,(char*)NULL,G__setup_memvarRDKConfig,G__setup_memfuncRDKConfig);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_exception);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_AnalyzerMode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_RDKException),sizeof(RDKException),-1,32768,(char*)NULL,G__setup_memvarRDKException,G__setup_memfuncRDKException);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_RawData),sizeof(RawData),-1,0,(char*)NULL,G__setup_memvarRawData,G__setup_memfuncRawData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Recon),sizeof(Recon),-1,1024,(char*)NULL,G__setup_memvarRecon,G__setup_memfuncRecon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Entry),sizeof(Entry),-1,0,(char*)NULL,G__setup_memvarEntry,G__setup_memfuncEntry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_BoardEvent),sizeof(BoardEvent),-1,33024,(char*)NULL,G__setup_memvarBoardEvent,G__setup_memfuncBoardEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_epEvent),sizeof(epEvent),-1,35584,(char*)NULL,G__setup_memvarepEvent,G__setup_memfuncepEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_NData),sizeof(NData),-1,2304,(char*)NULL,G__setup_memvarNData,G__setup_memfuncNData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Task),sizeof(Task),-1,256,(char*)NULL,G__setup_memvarTask,G__setup_memfuncTask);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Smoother),sizeof(Smoother),-1,1280,(char*)NULL,G__setup_memvarSmoother,G__setup_memfuncSmoother);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Analyzer),sizeof(Analyzer),-1,33792,(char*)NULL,G__setup_memvarAnalyzer,G__setup_memfuncAnalyzer);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_boost);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_boostcLcLifstream);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_BufferedReader),sizeof(BufferedReader),-1,1280,(char*)NULL,G__setup_memvarBufferedReader,G__setup_memfuncBufferedReader);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TH1);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TBits);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_RawTreeReader),sizeof(RawTreeReader),-1,34048,(char*)NULL,G__setup_memvarRawTreeReader,G__setup_memfuncRawTreeReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_CalibrationData),sizeof(CalibrationData),-1,324864,(char*)NULL,G__setup_memvarCalibrationData,G__setup_memfuncCalibrationData);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_pairlEintcOintgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TObjLink);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TSortedList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_CalibrationList),sizeof(CalibrationList),-1,324864,(char*)NULL,G__setup_memvarCalibrationList,G__setup_memfuncCalibrationList);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_buffer_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_DataReader),sizeof(DataReader),-1,34048,(char*)NULL,G__setup_memvarDataReader,G__setup_memfuncDataReader);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_ROOTcLcLMinuit2);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_ROOTcLcLMinuit2cLcLGenericFunction);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_ROOTcLcLMinuit2cLcLFCNBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_EpgFitFunction),sizeof(EpgFitFunction),-1,33792,(char*)NULL,G__setup_memvarEpgFitFunction,G__setup_memfuncEpgFitFunction);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Header),sizeof(Header),-1,34048,(char*)NULL,G__setup_memvarHeader,G__setup_memfuncHeader);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_NdatReader),sizeof(NdatReader),-1,33792,(char*)NULL,G__setup_memvarNdatReader,G__setup_memfuncNdatReader);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_NdatWriter),sizeof(NdatWriter),-1,33792,(char*)NULL,G__setup_memvarNdatWriter,G__setup_memfuncNdatWriter);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMutex);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TThread);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TThreadcLcLEState);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TCanvas);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Plotter),sizeof(Plotter),-1,1280,(char*)NULL,G__setup_memvarPlotter,G__setup_memfuncPlotter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Quantity),sizeof(Quantity),-1,34048,(char*)NULL,G__setup_memvarQuantity,G__setup_memfuncQuantity);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TFitResultPtr);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Plotter2),sizeof(Plotter2),-1,1280,(char*)NULL,G__setup_memvarPlotter2,G__setup_memfuncPlotter2);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLconst_iteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_RawFileReader),sizeof(RawFileReader),-1,34048,(char*)NULL,G__setup_memvarRawFileReader,G__setup_memfuncRawFileReader);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TChain);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_TreeFilter),sizeof(TreeFilter),-1,1280,(char*)NULL,G__setup_memvarTreeFilter,G__setup_memfuncTreeFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgR),sizeof(vector<Task,allocator<Task> >),-1,36608,(char*)NULL,G__setup_memvarvectorlETaskcOallocatorlETaskgRsPgR,G__setup_memfuncvectorlETaskcOallocatorlETaskgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iterator);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlETaskcOallocatorlETaskgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOTaskcOlongcOTaskmUcOTaskaNgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlETaskcOallocatorlETaskgRsPgRcLcLconst_iteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_RDKReader),sizeof(RDKReader),-1,34051,(char*)NULL,G__setup_memvarRDKReader,G__setup_memfuncRDKReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_ThreadedAnalyzer),sizeof(ThreadedAnalyzer),-1,34048,(char*)NULL,G__setup_memvarThreadedAnalyzer,G__setup_memfuncThreadedAnalyzer);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_dequelETaskcOallocatorlETaskgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_queuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR),sizeof(queue<Task,deque<Task,allocator<Task> > >),-1,256,(char*)NULL,G__setup_memvarqueuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR,G__setup_memfuncqueuelETaskcOdequelETaskcOallocatorlETaskgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_SecondPass),sizeof(SecondPass),-1,33792,(char*)NULL,G__setup_memvarSecondPass,G__setup_memfuncSecondPass);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_SecondPasscLcLMultiplicityCompare);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_dequelEepEventcOallocatorlEepEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_dequelEEntrycOallocatorlEEntrygRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_dequelEReconcOallocatorlERecongRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_dequelEBoardEventcOallocatorlEBoardEventgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_Runnable),sizeof(Runnable),-1,2,(char*)NULL,G__setup_memvarRunnable,G__setup_memfuncRunnable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_ThreadRunner),sizeof(ThreadRunner),-1,33792,(char*)NULL,G__setup_memvarThreadRunner,G__setup_memfuncThreadRunner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_ThreadQueue),sizeof(ThreadQueue),-1,32768,(char*)NULL,G__setup_memvarThreadQueue,G__setup_memfuncThreadQueue);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_dequelERunnablemUcOallocatorlERunnablemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_queuelERunnablemUcOdequelERunnablemUcOallocatorlERunnablemUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_MultiThread),sizeof(MultiThread),-1,33792,(char*)NULL,G__setup_memvarMultiThread,G__setup_memfuncMultiThread);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_vectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_iteratorlErandom_access_iterator_tagcOSyncThreadmUcOlongcOSyncThreadmUmUcOSyncThreadmUaNgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_reverse_iteratorlEvectorlESyncThreadmUcOallocatorlESyncThreadmUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_EpFitFunction);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TMarker);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TLine);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_TLatex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_EpFitter),sizeof(EpFitter),-1,1280,(char*)NULL,G__setup_memvarEpFitter,G__setup_memfuncEpFitter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_TreeReader),sizeof(TreeReader),-1,1280,(char*)NULL,G__setup_memvarTreeReader,G__setup_memfuncTreeReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_ExeWrapper),sizeof(ExeWrapper),-1,1280,(char*)NULL,G__setup_memvarExeWrapper,G__setup_memfuncExeWrapper);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_EventDrawer),sizeof(EventDrawer),-1,1280,(char*)NULL,G__setup_memvarEventDrawer,G__setup_memfuncEventDrawer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_GFitter),sizeof(GFitter),-1,1280,(char*)NULL,G__setup_memvarGFitter,G__setup_memfuncGFitter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_EpFilter),sizeof(EpFilter),-1,1280,(char*)NULL,G__setup_memvarEpFilter,G__setup_memfuncEpFilter);
   G__get_linked_tagnum_fwd(&G__RDKDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_epComp),sizeof(epComp),-1,768,(char*)NULL,G__setup_memvarepComp,G__setup_memfuncepComp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RDKDictLN_CompareData),sizeof(CompareData),-1,33792,(char*)NULL,G__setup_memvarCompareData,G__setup_memfuncCompareData);
}
extern "C" void G__cpp_setupRDKDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupRDKDict()");
  G__set_cpp_environmentRDKDict();
  G__cpp_setup_tagtableRDKDict();

  G__cpp_setup_inheritanceRDKDict();

  G__cpp_setup_typetableRDKDict();

  G__cpp_setup_memvarRDKDict();

  G__cpp_setup_memfuncRDKDict();
  G__cpp_setup_globalRDKDict();
  G__cpp_setup_funcRDKDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRDKDict();
  return;
}
class G__cpp_setup_initRDKDict {
  public:
    G__cpp_setup_initRDKDict() { G__add_setup_func("RDKDict",(G__incsetup)(&G__cpp_setupRDKDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRDKDict() { G__remove_setup_func("RDKDict"); }
};
G__cpp_setup_initRDKDict G__cpp_setup_initializerRDKDict;

